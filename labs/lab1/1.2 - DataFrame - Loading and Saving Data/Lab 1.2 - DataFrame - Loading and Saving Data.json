{"paragraphs":[{"text":"%md\n\n## Loading data from CSV file\n\nCSV stands for commma-separated values. This is a common text file format in which each line represents a single record, and commas separate each field\nwithin a record.\n","dateUpdated":"2018-03-15T18:25:51-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Loading data from CSV file</h2>\n<p>CSV stands for commma-separated values. This is a common text file format in which each line represents a single record, and commas separate each field\n<br  />within a record.</p>\n"}]},"apps":[],"jobName":"paragraph_1521152751396_366976738","id":"20180310-232008_2084436888","dateCreated":"2018-03-15T18:25:51-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1092"},{"text":"%spark\n\nimport org.apache.spark.sql.types.{StructField, StructType, StringType, LongType}\n\nval dataSchema = new StructType(Array(\n    new StructField(\"DEST_COUNTRY_NAME\", StringType, true),\n    new StructField(\"ORIGIN_COUNTRY_NAME\", StringType, true),\n    new StructField(\"count\", LongType, false)\n))\n\nval dfFromCsvFile = spark.read.format(\"csv\")\n    .option(\"header\", \"true\")\n    .option(\"mode\", \"FAILFAST\")\n    .schema(dataSchema)\n    .load(\"../../../data/flight-data/csv/2010-summary.csv\")\n    \ndfFromCsvFile.show(5)\n","dateUpdated":"2018-03-15T18:25:51-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152751401_365052994","id":"20180310-232058_1854265386","dateCreated":"2018-03-15T18:25:51-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1093"},{"text":"%md\n\n## Saving DataFrame to a CSV file\n\nWe can take our CSV file and write it out as a TSV file (with tabs separating data fields)\n\nWhen we list the destination directory, we will see that my-tsv-file is actually a folder with numerous files within it. This actually reflects the number of paritions in our DataFrame at that time. If we were to repartition our data before then, we would end up with a different number of files.\n","dateUpdated":"2018-03-15T18:25:51-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Saving DataFrame to a CSV file</h2>\n<p>We can take our CSV file and write it out as a TSV file (with tabs separating data fields)</p>\n<p>When we list the destination directory, we will see that my-tsv-file is actually a folder with numerous files within it. This actually reflects the number of paritions in our DataFrame at that time. If we were to repartition our data before then, we would end up with a different number of files.</p>\n"}]},"apps":[],"jobName":"paragraph_1521152751402_366207241","id":"20180310-233015_1064163149","dateCreated":"2018-03-15T18:25:51-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1094"},{"text":"%spark\n\ndfFromCsvFile.write\n    .format(\"csv\")\n    .mode(\"overwrite\")\n    .option(\"sep\", \"\\t\")\n    .save(\"../../../output/my-tsv-file.tsv\")","dateUpdated":"2018-03-15T18:25:51-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152751403_365822492","id":"20180310-232850_120441597","dateCreated":"2018-03-15T18:25:51-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1095"},{"text":"%md\n\n## Using Parquet files with Spark\n\nParquet is an interoperable columnar storage format. It focusses on space efficiency and query efficiency. Parquet's origin is based on Google's Dremel and was developed by Twitter and Cloudera.\n\nParquet is now an Apache project - [Apache Parquet](https://parquet.apache.org).\n\nSpark can load data from Parquet files and save data as Parquet files.\n\n","dateUpdated":"2018-03-15T18:25:51-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Using Parquet files with Spark</h2>\n<p>Parquet is an interoperable columnar storage format. It focusses on space efficiency and query efficiency. Parquet's origin is based on Google's Dremel and was developed by Twitter and Cloudera.</p>\n<p>Parquet is now an Apache project - <a href=\"https://parquet.apache.org\">Apache Parquet</a>.</p>\n<p>Spark can load data from Parquet files and save data as Parquet files.</p>\n"}]},"apps":[],"jobName":"paragraph_1521152751405_363513998","id":"20160822-165125_1131574017","dateCreated":"2018-03-15T18:25:51-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1096"},{"title":"Loading data from Parquet file","text":"%spark\n\nval flightData = spark.read\n                    .format(\"parquet\")\n                    .load(\"../../../data/flight-data/parquet/2010-summary.parquet\")\n\nflightData.show(5)\n","dateUpdated":"2018-03-15T18:25:51-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152751405_363513998","id":"20160823-111517_1662906000","dateCreated":"2018-03-15T18:25:51-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1097"},{"title":"Saving data to Parquet file","text":"%spark\n\ndfFromCsvFile.write\n    .format(\"parquet\")\n    .mode(\"overwrite\")\n    .save(\"../../../output/2010-summary.parquet\")\n    \n","dateUpdated":"2018-03-15T18:25:51-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152751406_364668245","id":"20160823-112553_610561150","dateCreated":"2018-03-15T18:25:51-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1098"},{"text":"%md\n\n## Using JSON files with Spark\n\nSpark can read data from JSON files.\n\nThere are some catches when working with this kind of data that are worth considering before we jump in. \n\nIn Spark, when we refer to JSON files, we refer to _line-delimited_ JSON files. This contrasts with files that have a large JSON object or array per file.\n\nThe _line-delimited_ versus _multiline_ trade-off is controlled by a single option: **multiLine**. \n\nWhen you set this option to true, you can read an entire file as one json object and Spark will go through the work of parsing that into a\nDataFrame. \n\nLine-delimited JSON is actually a much more stable format because it allows you to append to a file with a new record (rather than\nhaving to read in an entire file and then write it out), which is what we recommend that you use. \n\nAnother key reason for the popularity of line-delimited JSON is because JSON objects have structure, and JavaScript (on which JSON is based) has at least basic types. This makes it easier to work with because Spark can make more assumptions on our behalf about the data.\n\n","dateUpdated":"2018-03-15T18:25:51-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Using JSON files with Spark</h2>\n<p>Spark can read data from JSON files.</p>\n<p>There are some catches when working with this kind of data that are worth considering before we jump in.</p>\n<p>In Spark, when we refer to JSON files, we refer to <em>line-delimited</em> JSON files. This contrasts with files that have a large JSON object or array per file.</p>\n<p>The <em>line-delimited</em> versus <em>multiline</em> trade-off is controlled by a single option: <strong>multiLine</strong>.</p>\n<p>When you set this option to true, you can read an entire file as one json object and Spark will go through the work of parsing that into a\n<br  />DataFrame.</p>\n<p>Line-delimited JSON is actually a much more stable format because it allows you to append to a file with a new record (rather than\n<br  />having to read in an entire file and then write it out), which is what we recommend that you use.</p>\n<p>Another key reason for the popularity of line-delimited JSON is because JSON objects have structure, and JavaScript (on which JSON is based) has at least basic types. This makes it easier to work with because Spark can make more assumptions on our behalf about the data.</p>\n"}]},"apps":[],"jobName":"paragraph_1521152751407_364283496","id":"20160823-120136_710583192","dateCreated":"2018-03-15T18:25:51-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1099"},{"title":"Loading data from JSON","text":"%spark\n\nimport org.apache.spark.sql.types.{StructField, StructType, StringType, LongType}\n\nval dataSchema = new StructType(Array(\n    new StructField(\"DEST_COUNTRY_NAME\", StringType, true),\n    new StructField(\"ORIGIN_COUNTRY_NAME\", StringType, true),\n    new StructField(\"count\", LongType, false)\n))\n\nval dfFromJson = spark.read\n            .format(\"json\").option(\"mode\", \"FAILFAST\")\n            .load(\"../../../data/flight-data/json/2010-summary.json\")\n\ndfFromJson.show(5)\n\ndfFromJson.printSchema()\n","dateUpdated":"2018-03-15T18:25:51-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152751410_375441214","id":"20160823-120614_1736879537","dateCreated":"2018-03-15T18:25:51-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1100"},{"title":"Saving data as JSON file","text":"%spark\n\ndfFromJson.write\n    .format(\"json\")\n    .mode(\"overwrite\")\n    .save(\"../../../output/my-jsonfile.json\")\n    \n","dateUpdated":"2018-03-15T18:25:51-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152751413_372747972","id":"20160823-120800_314999582","dateCreated":"2018-03-15T18:25:51-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1101"},{"title":"Reading data from JSON file whose schema is known","text":"%spark\n\nimport org.apache.spark.sql.types.{StructField, StructType, StringType, LongType}\n\nval dataSchema = new StructType(Array(\n    new StructField(\"DEST_COUNTRY_NAME\", StringType, true),\n    new StructField(\"ORIGIN_COUNTRY_NAME\", StringType, true),\n    new StructField(\"count\", LongType, true)\n))\n\nval dfFromJson = spark.read\n            .format(\"json\").option(\"mode\", \"FAILFAST\")\n            .schema(dataSchema)\n            .load(\"../../../data/flight-data/json/2010-summary.json\")\n\ndfFromJson.show(5)\n","dateUpdated":"2018-03-15T18:25:51-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152751415_373517470","id":"20160823-122854_1466425181","dateCreated":"2018-03-15T18:25:51-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1102"},{"text":"","dateUpdated":"2018-03-15T18:25:51-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152751415_373517470","id":"20160825-005916_631693256","dateCreated":"2018-03-15T18:25:51-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1103"}],"name":"Lab 1.2 - DataFrame - Loading and Saving Data","id":"2DBFQXFXY","angularObjects":{"2DAKWKC7R:shared_process":[],"2DANBH7HM:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}