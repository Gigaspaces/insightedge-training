{"paragraphs":[{"title":"Getting information about a Dataframe","text":"%spark\n\nimport org.apache.spark.sql.types.{StructField, StructType, StringType, LongType}\n\nval dataSchema = new StructType(Array(\n    new StructField(\"DEST_COUNTRY_NAME\", StringType, true),\n    new StructField(\"ORIGIN_COUNTRY_NAME\", StringType, true),\n    new StructField(\"count\", LongType, false)\n))\n\nval flightDf = spark.read.format(\"csv\")\n    .option(\"header\", \"true\")\n    .option(\"mode\", \"FAILFAST\")\n    .schema(dataSchema)\n    .load(\"../../../data/flight-data/csv/2010-summary.csv\")\n    \nflightDf.cache\n\nflightDf.columns\n\nflightDf.explain\n\nflightDf.dtypes\n\nflightDf.printSchema\n\nflightDf.show\n","dateUpdated":"2018-03-15T18:28:00-0400","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152880946_-143384193","id":"20160822-145305_1775455394","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4427"},{"text":"%md\n\n## Language-integrated query methods of the DataFrame class\n\nWe will create some dataframes programmatically to illustrate the language integrated query methods.","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Language-integrated query methods of the DataFrame class</h2>\n<p>We will create some dataframes programmatically to illustrate the language integrated query methods.</p>\n"}]},"apps":[],"jobName":"paragraph_1521152880947_-143768942","id":"20160823-174226_141584309","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4428"},{"text":"%spark\n\ncase class Customer(cId: Long, name: String, age: Int, gender: String)\nval customers = List(\n    Customer(1, \"James\", 21, \"M\"),\n    Customer(2, \"Liz\", 25, \"F\"),\n    Customer(3, \"John\", 31, \"M\"),\n    Customer(4, \"Jennifer\", 45, \"F\"),\n    Customer(5, \"Robert\", 41, \"M\"),\n    Customer(6, \"Sandra\", 45, \"F\")\n)\nval customerDF = sc.parallelize(customers).toDF()\n\ncase class Product(pId: Long, name: String, price: Double, cost: Double)\n\nval products = List(\n    Product(1, \"Dell\", 600, 400),\n    Product(2, \"Kindle\", 100, 40),\n    Product(3, \"iPad\", 600, 500),\n    Product(4, \"Galaxy\", 600, 400),\n    Product(5, \"MacBook\", 1200, 900),\n    Product(6, \"iPhone\", 500, 400)\n)\nval productDF = sc.parallelize(products).toDF()\n\ncase class SalesSummary(date: String, product: String, country: String, revenue: Double)\n\nval sales = List(SalesSummary(\"01/01/2015\", \"Chromebook\", \"USA\", 40000),\nSalesSummary(\"01/02/2015\", \"Chromebook\", \"USA\", 30000),\nSalesSummary(\"01/01/2015\", \"Chromebook\", \"India\", 10000),\nSalesSummary(\"01/02/2015\", \"Chromebook\", \"India\", 5000),\nSalesSummary(\"01/01/2015\", \"Macbook\", \"USA\", 20000),\nSalesSummary(\"01/02/2015\", \"Macbook\", \"USA\", 10000),\nSalesSummary(\"01/01/2015\", \"Macbook\", \"India\", 9000),\nSalesSummary(\"01/02/2015\", \"Macbook\", \"India\", 6000))\n\nval salesDF = sc.parallelize(sales).toDF()","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152880950_-144923189","id":"20160823-175111_1341992873","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4429"},{"text":"%md\n\n## agg\n\nThe **agg** method performs specified aggregations on one or more columns in the source DataFrame and\nreturns the result as a new DataFrame.","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>agg</h2>\n<p>The <strong>agg</strong> method performs specified aggregations on one or more columns in the source DataFrame and\n<br  />returns the result as a new DataFrame.</p>\n"}]},"apps":[],"jobName":"paragraph_1521152880951_-145307938","id":"20160823-175710_728578499","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4430"},{"text":"%spark\n\nval aggregates = productDF.agg(max(\"price\"), min(\"price\"), count(\"name\"))\n\naggregates.show\n","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152880952_-147231682","id":"20160823-180618_860695558","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4431"},{"text":"%md\n\n## apply\n\nThe **apply** method takes the name of a column as an argument and returns the specified column in the\nsource DataFrame as an instance of the **Column** class. The **Column** class provides operators for manipulating a\ncolumn in a DataFrame.\n","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>apply</h2>\n<p>The <strong>apply</strong> method takes the name of a column as an argument and returns the specified column in the\n<br  />source DataFrame as an instance of the <strong>Column</strong> class. The <strong>Column</strong> class provides operators for manipulating a\n<br  />column in a DataFrame.</p>\n"}]},"apps":[],"jobName":"paragraph_1521152880952_-147231682","id":"20160823-180643_1652513120","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4432"},{"text":"%spark\n\nval priceColumn = productDF.apply(\"price\")\n\nval discountedPriceColumn = priceColumn * 0.10","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152880953_-147616431","id":"20160823-180831_1959446161","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4433"},{"text":"%md\n\nScala provides syntactic sugar that allows you to use productDF(\"price\") instead of productDF.apply(\"price\"). \n\nIt automatically converts productDF(\"price\") to productDF.apply(\"price\"). \n\nSo the preceding code can be rewritten as follows:","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Scala provides syntactic sugar that allows you to use productDF(&ldquo;price&rdquo;) instead of productDF.apply(&ldquo;price&rdquo;).</p>\n<p>It automatically converts productDF(&ldquo;price&rdquo;) to productDF.apply(&ldquo;price&rdquo;).</p>\n<p>So the preceding code can be rewritten as follows:</p>\n"}]},"apps":[],"jobName":"paragraph_1521152880953_-147616431","id":"20160823-181039_165411325","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4434"},{"text":"%spark\n\nval priceColumn = productDF(\"price\")\n\nval discountedPriceColumn = priceColumn * 0.5","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152880956_-148770678","id":"20160823-181124_19808600","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4435"},{"text":"%md\n\n## Notes on the **Column** class\n\nAn instance of the **Column** class is generally used as an input to some of the DataFrame methods or functions defined in the Spark SQL library.\n\nIf a method or function expects an instance of the Column class as an argument, we can use the **$\"...\"** notation to select a column in a DataFrame.\n\nFor example, the following three aggregates are equivalent:\n\n","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Notes on the <strong>Column</strong> class</h2>\n<p>An instance of the <strong>Column</strong> class is generally used as an input to some of the DataFrame methods or functions defined in the Spark SQL library.</p>\n<p>If a method or function expects an instance of the Column class as an argument, we can use the <strong>$&ldquo;&hellip;&ldquo;</strong> notation to select a column in a DataFrame.</p>\n<p>For example, the following three aggregates are equivalent:</p>\n"}]},"apps":[],"jobName":"paragraph_1521152880957_-149155427","id":"20160823-181235_559377109","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4436"},{"text":"%spark\n\nval aggregates1 = productDF.agg(max(productDF(\"price\")), min(productDF(\"price\")), count(productDF(\"name\")))\n\naggregates1.show\n\nval aggregates2 = productDF.agg(max(\"price\"), min(\"price\"), count(\"name\"))\n\naggregates2.show\n\nval aggregates3 = productDF.agg(max($\"price\"), min($\"price\"), count($\"name\"))\n\naggregates3.show\n\n","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152880959_-148385929","id":"20160823-181903_1519059300","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4437"},{"text":"%md\n\n### **select**\n\nThe *select* method returns a DataFrame containing only the specified columns from the source DataFrame.\n","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>select</strong></h3>\n<p>The <em>select</em> method returns a DataFrame containing only the specified columns from the source DataFrame.</p>\n"}]},"apps":[],"jobName":"paragraph_1521152880960_-162621638","id":"20160825-004227_2034053977","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4438"},{"text":"%spark\n\nval namesAgeDF = customerDF.select(\"name\", \"age\")\n\nnamesAgeDF.show","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152880961_-163006387","id":"20160825-004303_1682213357","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4439"},{"text":"%md\n\n### **filter**\n\nThe filter method filters rows in the source DataFrame using a SQL expression provided to it as an argument. It returns a new DataFrame containing only the filtered rows. The SQL expression can be passed as a string argument.","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>filter</strong></h3>\n<p>The filter method filters rows in the source DataFrame using a SQL expression provided to it as an argument. It returns a new DataFrame containing only the filtered rows. The SQL expression can be passed as a string argument.</p>\n"}]},"apps":[],"jobName":"paragraph_1521152880961_-163006387","id":"20160823-182045_153856142","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4440"},{"text":"%spark\n\nval filteredDF = customerDF.filter(\"age > 25\")\n\nfilteredDF.show\n\nval filteredDF2 = customerDF.filter($\"age\" > 40)\n\nfilteredDF2.show\n\nval filteredDF3 = customerDF.filter(customerDF(\"age\") > 20)\n\nfilteredDF3.show\n","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152880961_-163006387","id":"20160825-002529_441878203","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4441"},{"text":"%md\n\n### **groupBy**\n\nThe *groupBy* method groups the rows in the source DataFrame using the columns provided to it as arguments. Aggregation can be performed on the grouped data returned by this method.\n","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>groupBy</strong></h3>\n<p>The <em>groupBy</em> method groups the rows in the source DataFrame using the columns provided to it as arguments. Aggregation can be performed on the grouped data returned by this method.</p>\n"}]},"apps":[],"jobName":"paragraph_1521152880965_-164545383","id":"20160825-003138_1418319608","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4442"},{"text":"%spark\n\nval countByGender = customerDF.groupBy(\"gender\").count\n\ncountByGender.show\n\nval revenueByProductDF = salesDF.groupBy(\"product\").sum(\"revenue\")\n\nrevenueByProductDF.show\n","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152880966_-163391136","id":"20160825-002634_332193277","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4443"},{"text":"%md\n\n### **orderBy**\n\nThe *orderBy* method returns a DataFrame sorted by the given columns. It takes the names of one or more columns as arguments.","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>orderBy</strong></h3>\n<p>The <em>orderBy</em> method returns a DataFrame sorted by the given columns. It takes the names of one or more columns as arguments.</p>\n"}]},"apps":[],"jobName":"paragraph_1521152880967_-163775885","id":"20160825-003347_1250302752","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4444"},{"text":"%spark\n\nval sortedDF = customerDF.orderBy(\"name\")\n\nsortedDF.show","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152880967_-163775885","id":"20160825-004007_244050346","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4445"},{"text":"","dateUpdated":"2018-03-15T18:28:00-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521152880968_-165699629","id":"20160825-005916_631693256","dateCreated":"2018-03-15T18:28:00-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4446"}],"name":"Lab 6.3 - DataFrame - Operations","id":"2D9TS8335","angularObjects":{"2DAKWKC7R:shared_process":[],"2DANBH7HM:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}