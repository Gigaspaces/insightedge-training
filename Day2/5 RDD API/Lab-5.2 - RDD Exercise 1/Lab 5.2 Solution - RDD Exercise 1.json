{"paragraphs":[{"text":"%md\n\nFrom the file <b>cities.csv</b>, find the following:\n\n<ul>\n<li>Number of cities with altitude more than 25</li>\n<li>List of cities starting with letter 'N'</li>\n<li>Map the data to the Cities class defined below and write them to the XAP grid. \n</ul>\n","user":"anonymous","dateUpdated":"2018-12-31T10:41:45+0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>From the file <b>cities.csv</b>, find the following:</p>\n<ul>\n<li>Number of cities with altitude more than 25</li>\n<li>List of cities starting with letter 'N'</li>\n<li>Map the data to the Cities class defined below and write them to the XAP grid. \n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1545925889157_1897004911","id":"20161227-132530_1683227807","dateCreated":"2018-12-27T17:51:29+0200","dateStarted":"2018-12-31T10:41:45+0200","dateFinished":"2018-12-31T10:41:49+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2660"},{"text":"%md First few lines from **cities.cvs**\n\n**Country,Name,lat,lng,Altitude**\nUnited States,New York City,40.7142691,-74.0059738,2\nUnited States,Los Angeles,34.0522342,-118.2436829,115\nUnited States,Chicago,41.8500330,-87.6500549,181\nUnited States,Houston,29.7632836,-95.3632736,15\n","user":"anonymous","dateUpdated":"2018-12-27T17:51:29+0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>First few lines from <strong>cities.cvs</strong></p>\n<p><strong>Country,Name,lat,lng,Altitude</strong>\n<br  />United States,New York City,40.7142691,-74.0059738,2\n<br  />United States,Los Angeles,34.0522342,-118.2436829,115\n<br  />United States,Chicago,41.8500330,-87.6500549,181\n<br  />United States,Houston,29.7632836,-95.3632736,15</p>\n"}]},"apps":[],"jobName":"paragraph_1545925889163_-603819693","id":"20170226-131811_789062440","dateCreated":"2018-12-27T17:51:29+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2661"},{"text":"%define \n\npackage model.v1\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n//// Name,Altitude\ncase class City(\n\n                    @BeanProperty\n                    @SpaceId(autoGenerate = true)\n                    var id: String,\n\n                    @BeanProperty\n                    var name: String,\n\n                    @BooleanBeanProperty\n                    var altitude: Int\n\n                  ) {\n\n  def this() = this(null, null, -1)\n\n}","user":"anonymous","dateUpdated":"2018-12-31T10:48:18+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@4db6a09\n"}]},"apps":[],"jobName":"paragraph_1545925889165_-608671514","id":"20170619-044039_1674638881","dateCreated":"2018-12-27T17:51:29+0200","dateStarted":"2018-12-31T10:48:18+0200","dateFinished":"2018-12-31T10:48:36+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2662"},{"text":"%spark\n\nval cities = sc.textFile(\"../../../../Data/cities.csv\").filter( line => (! line.contains(\"Altitude\")) ).map(line => line.split(\",\")).cache\n\nval citiesWithAltitudeMoreThan25 = cities.filter(x => Integer.parseInt(x(4)) > 25).map(x => x(1))\n\nval citiesStartingWithLetterN = cities.filter(x => x(1).startsWith(\"N\")).map(x => x(1))\n\nprintln(\"Cities with altitude greater than 25:\")\n\ncitiesWithAltitudeMoreThan25.collect.foreach(println)\n\nprintln(\"-----------------------------\")\nprintln(\"Cities with first letter 'N':\")\n\ncitiesStartingWithLetterN.collect.foreach(println)\n","user":"anonymous","dateUpdated":"2018-12-31T10:41:59+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cities: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[3] at map at <console>:25\ncitiesWithAltitudeMoreThan25: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[5] at map at <console>:27\ncitiesStartingWithLetterN: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[7] at map at <console>:27\nCities with altitude greater than 25:\nLos Angeles\nChicago\nSan Antonio\nSan Diego\nDallas\nDetroit\nIndianapolis\nColumbus\nSan Francisco\nAustin\nMemphis\nNew South Memphis\nFort Worth\nCharlotte\nMilwaukee\nSeattle\nEl Paso\nDenver\nPortland\nOklahoma City\nNashville\nTucson\nAlbuquerque\nLas Vegas\nFresno\nCleveland\nNorth Kansas City\nKansas City\nAtlanta\nMesa\nTulsa\nMinneapolis\nColorado Springs\nWichita\nSanta Ana\nWest Raleigh\nArlington\nAnaheim\nSaint Louis\nPittsburgh\nToledo\nCincinnati\nRiverside\nBakersfield\nBuffalo\nAurora\nRaleigh\nSaint Paul\nLexington-Fayette\nPlano\nLouisville\nLincoln\nGlendale\nHenderson\nChandler\nGreensboro\nBirmingham\nFort Wayne\nLexington\nMadison\nGarland\nParadise\nLubbock\nRochester\nLaredo\nAkron\nOrlando\nDurham\nNorth Glendale\nScottsdale\n-----------------------------\nCities with first letter 'N':\nNew York City\nNew South Memphis\nNashville\nNew Orleans\nNorth Kansas City\nNewark\nNorfolk\nNorth Glendale\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4042/jobs/job?id=0","http://192.168.9.185:4042/jobs/job?id=1"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545925889168_-1505279646","id":"20161227-132809_816447459","dateCreated":"2018-12-27T17:51:29+0200","dateStarted":"2018-12-31T10:41:59+0200","dateFinished":"2018-12-31T10:42:33+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2663"},{"text":"val cities = sc.textFile(\"../../../../data/cities.csv\").filter(line => (! line.contains(\"Altitude\")) ).map(line => line.split(\",\")).cache\n\ncities.collect.foreach(println)","user":"anonymous","dateUpdated":"2018-12-31T10:44:31+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cities: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[11] at map at <console>:25\n[Ljava.lang.String;@439944\n[Ljava.lang.String;@4bdfb35b\n[Ljava.lang.String;@3afd7b70\n[Ljava.lang.String;@5cd1362d\n[Ljava.lang.String;@40c40d4a\n[Ljava.lang.String;@76373b62\n[Ljava.lang.String;@2740e82f\n[Ljava.lang.String;@72f5d2b4\n[Ljava.lang.String;@12bb3ffd\n[Ljava.lang.String;@5d98fae3\n[Ljava.lang.String;@7db970ef\n[Ljava.lang.String;@21857d9e\n[Ljava.lang.String;@6a0afa84\n[Ljava.lang.String;@705f5ac4\n[Ljava.lang.String;@46576228\n[Ljava.lang.String;@4cb48ef1\n[Ljava.lang.String;@71579339\n[Ljava.lang.String;@7b547ead\n[Ljava.lang.String;@6ef15cd\n[Ljava.lang.String;@6e44c0e7\n[Ljava.lang.String;@23c7484d\n[Ljava.lang.String;@7bbeeb8e\n[Ljava.lang.String;@501d849\n[Ljava.lang.String;@4d8a73f6\n[Ljava.lang.String;@5496df2a\n[Ljava.lang.String;@58f8bcad\n[Ljava.lang.String;@53b0e46b\n[Ljava.lang.String;@4dbb2828\n[Ljava.lang.String;@2fb6d13a\n[Ljava.lang.String;@32360db5\n[Ljava.lang.String;@66f12424\n[Ljava.lang.String;@721fbaba\n[Ljava.lang.String;@6b398ac2\n[Ljava.lang.String;@69e079b5\n[Ljava.lang.String;@6dfb0a9\n[Ljava.lang.String;@99a10a2\n[Ljava.lang.String;@2e52f4c9\n[Ljava.lang.String;@44950d67\n[Ljava.lang.String;@3f34b7a4\n[Ljava.lang.String;@6672afe0\n[Ljava.lang.String;@5f3feb5b\n[Ljava.lang.String;@33ad3bee\n[Ljava.lang.String;@29be33a8\n[Ljava.lang.String;@5a4094d0\n[Ljava.lang.String;@7a05d9f0\n[Ljava.lang.String;@20adff15\n[Ljava.lang.String;@7856abdb\n[Ljava.lang.String;@266e4615\n[Ljava.lang.String;@7270d171\n[Ljava.lang.String;@3d6acd7d\n[Ljava.lang.String;@702fa178\n[Ljava.lang.String;@24250f86\n[Ljava.lang.String;@50aab92a\n[Ljava.lang.String;@3b408767\n[Ljava.lang.String;@36e9c516\n[Ljava.lang.String;@3a3cb572\n[Ljava.lang.String;@3fda38f6\n[Ljava.lang.String;@9eebd5\n[Ljava.lang.String;@78a74fa5\n[Ljava.lang.String;@27eff2e6\n[Ljava.lang.String;@499c7365\n[Ljava.lang.String;@3e2be9c0\n[Ljava.lang.String;@7cb343c7\n[Ljava.lang.String;@2413e675\n[Ljava.lang.String;@e3ebec9\n[Ljava.lang.String;@6fba3327\n[Ljava.lang.String;@971f86c\n[Ljava.lang.String;@32ea8779\n[Ljava.lang.String;@49d9bf1b\n[Ljava.lang.String;@77c48e0c\n[Ljava.lang.String;@7170ba00\n[Ljava.lang.String;@17c73a18\n[Ljava.lang.String;@13e26e9c\n[Ljava.lang.String;@40852602\n[Ljava.lang.String;@345134a8\n[Ljava.lang.String;@1ae8dfc0\n[Ljava.lang.String;@1afed48f\n[Ljava.lang.String;@732254e4\n[Ljava.lang.String;@4e6bda5c\n[Ljava.lang.String;@12a10a8e\n[Ljava.lang.String;@7e17fef9\n[Ljava.lang.String;@1ff310ab\n[Ljava.lang.String;@fda8033\n[Ljava.lang.String;@15350e3c\n[Ljava.lang.String;@5494da55\n[Ljava.lang.String;@53e5ee24\n[Ljava.lang.String;@8e52773\n[Ljava.lang.String;@351c9cbd\n[Ljava.lang.String;@47a8ae39\n[Ljava.lang.String;@3b40ec26\n[Ljava.lang.String;@1a3f9a82\n[Ljava.lang.String;@4b17140c\n[Ljava.lang.String;@494cb231\n[Ljava.lang.String;@75d146e2\n[Ljava.lang.String;@13dc3950\n[Ljava.lang.String;@6018f853\n[Ljava.lang.String;@4ce9135b\n[Ljava.lang.String;@3370aa72\n[Ljava.lang.String;@419403f5\n[Ljava.lang.String;@66e9a1f4\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4042/jobs/job?id=2"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545925889174_1233901408","id":"20170226-140006_633467746","dateCreated":"2018-12-27T17:51:29+0200","dateStarted":"2018-12-31T10:44:31+0200","dateFinished":"2018-12-31T10:44:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2664"},{"text":"\n// Save to data grid\nimport model.v1._\n\nval cities = sc.textFile(\"../../../../data/cities.csv\").filter(line => (! line.contains(\"Altitude\")) ).map(line => line.split(\",\")).map(line => City(null, line(1), line(4).toInt))\n               \ncities.saveToGrid()","user":"anonymous","dateUpdated":"2018-12-31T10:49:56+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"import model.v1._\ncities: org.apache.spark.rdd.RDD[model.v1.City] = MapPartitionsRDD[6] at map at <console>:31\n<console>:34: error: value saveToGrid is not a member of org.apache.spark.rdd.RDD[model.v1.City]\n       cities.saveToGrid()\n              ^\n"}]},"apps":[],"jobName":"paragraph_1545925889180_-1117112658","id":"20170616-120721_1323332219","dateCreated":"2018-12-27T17:51:29+0200","dateStarted":"2018-12-31T10:49:56+0200","dateFinished":"2018-12-31T10:49:58+0200","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:2665"},{"user":"anonymous","dateUpdated":"2018-12-27T17:51:29+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545925889184_-1453001769","id":"20170619-044205_1204173446","dateCreated":"2018-12-27T17:51:29+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2666"}],"name":"Lab 5.2 Solution - RDD Exercise 1","id":"2E2BEUJFE","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}