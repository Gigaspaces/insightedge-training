{"paragraphs":[{"text":"%md\n\nFrom the file <b>cities.csv</b>, find the following:\n\n<ul>\n<li>Number of cities with altitude more than 25</li>\n<li>List of cities starting with letter 'N'</li>\n<li>Map the data to the Cities class defined below and write them to the XAP grid. \n</ul>\n","user":"anonymous","dateUpdated":"2019-01-01T14:19:32+0200","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>From the file <b>cities.csv</b>, find the following:</p>\n<ul>\n<li>Number of cities with altitude more than 25</li>\n<li>List of cities starting with letter 'N'</li>\n<li>Map the data to the Cities class defined below and write them to the XAP grid. \n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1546345111137_1605371872","id":"20161227-132530_1683227807","dateCreated":"2019-01-01T14:18:31+0200","dateStarted":"2019-01-01T14:19:32+0200","dateFinished":"2019-01-01T14:19:36+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:20978"},{"text":"%md First few lines from **cities.cvs**\n\n**Country,Name,lat,lng,Altitude**\nUnited States,New York City,40.7142691,-74.0059738,2\nUnited States,Los Angeles,34.0522342,-118.2436829,115\nUnited States,Chicago,41.8500330,-87.6500549,181\nUnited States,Houston,29.7632836,-95.3632736,15\n","user":"anonymous","dateUpdated":"2019-01-01T14:19:38+0200","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>First few lines from <strong>cities.cvs</strong></p>\n<p><strong>Country,Name,lat,lng,Altitude</strong><br/>United States,New York City,40.7142691,-74.0059738,2<br/>United States,Los Angeles,34.0522342,-118.2436829,115<br/>United States,Chicago,41.8500330,-87.6500549,181<br/>United States,Houston,29.7632836,-95.3632736,15</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1546345111138_-2143321440","id":"20170226-131811_789062440","dateCreated":"2019-01-01T14:18:31+0200","dateStarted":"2019-01-01T14:19:38+0200","dateFinished":"2019-01-01T14:19:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20979"},{"text":"%define \n\npackage model.v1\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n//// Name,Altitude\ncase class City(\n\n                    @BeanProperty\n                    @SpaceId(autoGenerate = true)\n                    var id: String,\n\n                    @BeanProperty\n                    var name: String,\n\n                    @BooleanBeanProperty\n                    var altitude: Int\n\n                  ) {\n\n  def this() = this(null, null, -1)\n\n}","user":"anonymous","dateUpdated":"2019-01-01T14:22:15+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@373cef8f\n"}]},"apps":[],"jobName":"paragraph_1546345111139_-1129141342","id":"20170619-044039_1674638881","dateCreated":"2019-01-01T14:18:31+0200","dateStarted":"2019-01-01T14:22:15+0200","dateFinished":"2019-01-01T14:22:29+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20980"},{"text":"%spark\n\nval cities = sc.textFile(\"../../../../Data/cities.csv\").filter( line => (! line.contains(\"Altitude\")) ).map(line => line.split(\",\")).cache\n\nval citiesWithAltitudeMoreThan25 = cities.filter(x => Integer.parseInt(x(4)) > 25).map(x => x(1))\n\nval citiesStartingWithLetterN = cities.filter(x => x(1).startsWith(\"N\")).map(x => x(1))\n\nprintln(\"Cities with altitude greater than 25:\")\n\ncitiesWithAltitudeMoreThan25.collect.foreach(println)\n\nprintln(\"-----------------------------\")\nprintln(\"Cities with first letter 'N':\")\n\ncitiesStartingWithLetterN.collect.foreach(println)\n","user":"anonymous","dateUpdated":"2019-01-01T14:22:35+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cities: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[3] at map at <console>:25\ncitiesWithAltitudeMoreThan25: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[5] at map at <console>:27\ncitiesStartingWithLetterN: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[7] at map at <console>:27\nCities with altitude greater than 25:\nLos Angeles\nChicago\nSan Antonio\nSan Diego\nDallas\nDetroit\nIndianapolis\nColumbus\nSan Francisco\nAustin\nMemphis\nNew South Memphis\nFort Worth\nCharlotte\nMilwaukee\nSeattle\nEl Paso\nDenver\nPortland\nOklahoma City\nNashville\nTucson\nAlbuquerque\nLas Vegas\nFresno\nCleveland\nNorth Kansas City\nKansas City\nAtlanta\nMesa\nTulsa\nMinneapolis\nColorado Springs\nWichita\nSanta Ana\nWest Raleigh\nArlington\nAnaheim\nSaint Louis\nPittsburgh\nToledo\nCincinnati\nRiverside\nBakersfield\nBuffalo\nAurora\nRaleigh\nSaint Paul\nLexington-Fayette\nPlano\nLouisville\nLincoln\nGlendale\nHenderson\nChandler\nGreensboro\nBirmingham\nFort Wayne\nLexington\nMadison\nGarland\nParadise\nLubbock\nRochester\nLaredo\nAkron\nOrlando\nDurham\nNorth Glendale\nScottsdale\n-----------------------------\nCities with first letter 'N':\nNew York City\nNew South Memphis\nNashville\nNew Orleans\nNorth Kansas City\nNewark\nNorfolk\nNorth Glendale\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4040/jobs/job?id=0","http://192.168.9.185:4040/jobs/job?id=1"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1546345111139_1902085499","id":"20161227-132809_816447459","dateCreated":"2019-01-01T14:18:31+0200","dateStarted":"2019-01-01T14:22:35+0200","dateFinished":"2019-01-01T14:22:51+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20981"},{"text":"val cities = sc.textFile(\"../../../../data/cities.csv\").filter(line => (! line.contains(\"Altitude\")) ).map(line => line.split(\",\")).cache\n\ncities.collect.foreach(println)","user":"anonymous","dateUpdated":"2019-01-01T14:22:56+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cities: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[11] at map at <console>:25\n[Ljava.lang.String;@146dd751\n[Ljava.lang.String;@1f8cae28\n[Ljava.lang.String;@30a340f9\n[Ljava.lang.String;@2b904516\n[Ljava.lang.String;@51bdc86a\n[Ljava.lang.String;@2bbac19b\n[Ljava.lang.String;@1b4e89d\n[Ljava.lang.String;@28a5b548\n[Ljava.lang.String;@1764d6ae\n[Ljava.lang.String;@6a2f7bc0\n[Ljava.lang.String;@4cf99618\n[Ljava.lang.String;@49f3753a\n[Ljava.lang.String;@78131b0c\n[Ljava.lang.String;@69738eb5\n[Ljava.lang.String;@693a9cd5\n[Ljava.lang.String;@3b326e6d\n[Ljava.lang.String;@5b99d97c\n[Ljava.lang.String;@2e6af29c\n[Ljava.lang.String;@130b0fb0\n[Ljava.lang.String;@3be24aba\n[Ljava.lang.String;@2e253683\n[Ljava.lang.String;@5722dfc9\n[Ljava.lang.String;@1c1f3c12\n[Ljava.lang.String;@350102b1\n[Ljava.lang.String;@3297bbbc\n[Ljava.lang.String;@738af6b0\n[Ljava.lang.String;@1610bb7f\n[Ljava.lang.String;@2b393786\n[Ljava.lang.String;@24fc3306\n[Ljava.lang.String;@677e5f\n[Ljava.lang.String;@13bfe66f\n[Ljava.lang.String;@71587699\n[Ljava.lang.String;@34f90fb7\n[Ljava.lang.String;@fd71af1\n[Ljava.lang.String;@633719fa\n[Ljava.lang.String;@51e957bb\n[Ljava.lang.String;@2d917e86\n[Ljava.lang.String;@1aa6e957\n[Ljava.lang.String;@4105db30\n[Ljava.lang.String;@5aca0824\n[Ljava.lang.String;@7c0938b5\n[Ljava.lang.String;@51c88a32\n[Ljava.lang.String;@3e7b0760\n[Ljava.lang.String;@347aa3a3\n[Ljava.lang.String;@183e909\n[Ljava.lang.String;@140f7a11\n[Ljava.lang.String;@72a92ff7\n[Ljava.lang.String;@13affdba\n[Ljava.lang.String;@dfa9567\n[Ljava.lang.String;@62caa93b\n[Ljava.lang.String;@5927e402\n[Ljava.lang.String;@350980b1\n[Ljava.lang.String;@6c017ada\n[Ljava.lang.String;@5bb58510\n[Ljava.lang.String;@3dd47d90\n[Ljava.lang.String;@44a17e93\n[Ljava.lang.String;@23110b77\n[Ljava.lang.String;@547b9700\n[Ljava.lang.String;@4add48e2\n[Ljava.lang.String;@5c7f2cc\n[Ljava.lang.String;@2e260bb0\n[Ljava.lang.String;@26ed4ae3\n[Ljava.lang.String;@6d79c84\n[Ljava.lang.String;@3cbc5f00\n[Ljava.lang.String;@2259a8ac\n[Ljava.lang.String;@6e2f5456\n[Ljava.lang.String;@54a6d6ab\n[Ljava.lang.String;@a3cd760\n[Ljava.lang.String;@654f0243\n[Ljava.lang.String;@71d66758\n[Ljava.lang.String;@1327f447\n[Ljava.lang.String;@7f4cb694\n[Ljava.lang.String;@620cfe24\n[Ljava.lang.String;@2022b99a\n[Ljava.lang.String;@c0be415\n[Ljava.lang.String;@16e90b16\n[Ljava.lang.String;@13112a31\n[Ljava.lang.String;@264aafa0\n[Ljava.lang.String;@7532dc30\n[Ljava.lang.String;@2bddc83b\n[Ljava.lang.String;@31073fd3\n[Ljava.lang.String;@42c3a1fc\n[Ljava.lang.String;@217336c8\n[Ljava.lang.String;@64aaaecd\n[Ljava.lang.String;@6c5bec2c\n[Ljava.lang.String;@33487c1a\n[Ljava.lang.String;@bb5c9cd\n[Ljava.lang.String;@3ad8d2b0\n[Ljava.lang.String;@9d1734b\n[Ljava.lang.String;@790966c7\n[Ljava.lang.String;@5c57238a\n[Ljava.lang.String;@206637e2\n[Ljava.lang.String;@222f538e\n[Ljava.lang.String;@10a23652\n[Ljava.lang.String;@750c1cbf\n[Ljava.lang.String;@64c4ecdb\n[Ljava.lang.String;@3c2f70ee\n[Ljava.lang.String;@3dbec19f\n[Ljava.lang.String;@2842db73\n[Ljava.lang.String;@6ba35894\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4040/jobs/job?id=2"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1546345111140_252772096","id":"20170226-140006_633467746","dateCreated":"2019-01-01T14:18:31+0200","dateStarted":"2019-01-01T14:22:56+0200","dateFinished":"2019-01-01T14:22:58+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20982"},{"text":"\n// Save to data grid\nimport model.v1._\nimport org.insightedge.spark.implicits.all._\nimport org.insightedge.spark.context.InsightEdgeConfig\n\nval cities = sc.textFile(\"../../../../data/cities.csv\").filter(line => (! line.contains(\"Altitude\")) ).map(line => line.split(\",\")).map(line => City(null, line(1), line(4).toInt))\n               \ncities.saveToGrid()","user":"anonymous","dateUpdated":"2019-01-01T14:25:47+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import model.v1._\nimport org.insightedge.spark.implicits.all._\nimport org.insightedge.spark.context.InsightEdgeConfig\ncities: org.apache.spark.rdd.RDD[model.v1.City] = MapPartitionsRDD[26] at map at <console>:41\n"}]},"apps":[],"jobName":"paragraph_1546345111140_-668407582","id":"20170616-120721_1323332219","dateCreated":"2019-01-01T14:18:31+0200","dateStarted":"2019-01-01T14:25:47+0200","dateFinished":"2019-01-01T14:25:52+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20983","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4040/jobs/job?id=3"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1546345381243_-1410682507","id":"20190101-142301_1895269960","dateCreated":"2019-01-01T14:23:01+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:20984"}],"name":"Lab 5.2 Solution - RDD Exercise 1","id":"2E19XARTW","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}