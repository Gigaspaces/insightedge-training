{"paragraphs":[{"text":"%md\n\n<h3>Examples illustrating <b>Pair RDDs</b></h3>\n\n<p>\nWe have a data file, <b>data_transactions.txt</b>, containing customer transactions of a store.</p>\n<p>\n<p>\nFirst ten lines from the data file are as follows:\n\n<pre>\n<b>transaction date#time#customer id#product id#quantity#product price</b>\n2015-03-30#6:55 AM#51#68#1#9506.21\n2015-03-30#7:39 PM#99#86#5#4107.59\n2015-03-30#11:57 AM#79#58#7#2987.22\n2015-03-30#12:46 AM#51#50#6#7501.89\n2015-03-30#11:39 AM#86#24#5#8370.2\n2015-03-30#10:35 AM#63#19#5#1023.57\n2015-03-30#2:30 AM#23#77#7#5892.41\n2015-03-30#7:41 PM#49#58#4#9298.18\n2015-03-30#9:18 AM#97#86#8#9462.89\n</pre>\n\nEach line in the file contains the following fields delimited with hash signs:\n\n<ul>\n<li>transaction date</li> \n<li>time</li>\n<li>customer ID</li> \n<li>product ID</li> \n<li>quantity</li>\n<li>product price</li> \n</ul>\n\n</p>\n","dateUpdated":"2018-03-15T18:31:48-0400","config":{"tableHide":false,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Examples illustrating <b>Pair RDDs</b></h3>\n<p>\nWe have a data file, <b>data_transactions.txt</b>, containing customer transactions of a store.</p>\n<p><p></p>\n<p>\nFirst ten lines from the data file are as follows:\n\n<pre>\n<b>transaction date#time#customer id#product id#quantity#product price</b>\n2015-03-30#6:55 AM#51#68#1#9506.21\n2015-03-30#7:39 PM#99#86#5#4107.59\n2015-03-30#11:57 AM#79#58#7#2987.22\n2015-03-30#12:46 AM#51#50#6#7501.89\n2015-03-30#11:39 AM#86#24#5#8370.2\n2015-03-30#10:35 AM#63#19#5#1023.57\n2015-03-30#2:30 AM#23#77#7#5892.41\n2015-03-30#7:41 PM#49#58#4#9298.18\n2015-03-30#9:18 AM#97#86#8#9462.89\n</pre>\n\nEach line in the file contains the following fields delimited with hash signs:\n\n<ul>\n<li>transaction date</li> \n<li>time</li>\n<li>customer ID</li> \n<li>product ID</li> \n<li>quantity</li>\n<li>product price</li> \n</ul>\n\n</p>\n"}]},"apps":[],"jobName":"paragraph_1521153108391_1051967698","id":"20161018-203104_1249834388","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15177"},{"text":"%md\n\n<h4>Creating Pair RDD</h4>\n\nEach line in the file contains transaction date, time, customer ID, product ID, quantity, and\nthe product price, delimited with hash signs. The following snippet will create a pair RDD with\ncustomer IDs as keys and the complete transaction data as values:\n","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Creating Pair RDD</h4>\n<p>Each line in the file contains transaction date, time, customer ID, product ID, quantity, and\n<br  />the product price, delimited with hash signs. The following snippet will create a pair RDD with\n<br  />customer IDs as keys and the complete transaction data as values:</p>\n"}]},"apps":[],"jobName":"paragraph_1521153108392_1050043954","id":"20161018-204026_1429116242","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15178"},{"text":"%spark\n\nval transactionData = spark.sparkContext.textFile(\"../../../data/data_transactions.txt\")\n                                        .filter(!_.startsWith(\"transaction date\"))\n                                        .map(_.split(\"#\"))\n\nvar transactionsByCustomer = transactionData.map(t => (t(2).toInt, t))\n\ntransactionsByCustomer.take(20)\n","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153108392_1050043954","id":"20161018-204136_1241756262","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15179"},{"text":"%md\n\n<h4>Getting keys and values from pair RDD</h4>\n\n<p>\nNow that we have the pair RDD, let us first see how many customers actually\nbought anything the previous day.\n</p>\n<p>\nWe can get a new RDD containing only the keys or only the\nvalues with pair RDD transformations named <b>keys</b> and <b>values</b>.\n</p>\n<p>\nSo we use this line to get a list of customer IDs, remove any duplicates and count the\nnumber of unique customer IDs:\n</p>","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Getting keys and values from pair RDD</h4>\n<p>\nNow that we have the pair RDD, let us first see how many customers actually\nbought anything the previous day.\n</p>\n<p>\nWe can get a new RDD containing only the keys or only the\nvalues with pair RDD transformations named <b>keys</b> and <b>values</b>.\n</p>\n<p>\nSo we use this line to get a list of customer IDs, remove any duplicates and count the\nnumber of unique customer IDs:\n</p>\n"}]},"apps":[],"jobName":"paragraph_1521153108393_1049659205","id":"20161018-204659_1317533356","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15180"},{"text":"%spark\n\nval keysOfTransactions = transactionsByCustomer.keys\n\nkeysOfTransactions.collect\n\nval distinctKeys = keysOfTransactions.distinct()\n\ndistinctKeys.collect\n\nval keyCount = distinctKeys.count()","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153108393_1049659205","id":"20161018-204927_2119367398","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15181"},{"title":"Find the customer who made the most transactions","text":"%md\n\n<p>\nEach line in the transactions file is one transaction. \n</p>\n<p>\nWe first compute the transaction count for each customer using the <b>countByKey</b> action.\n</p>\n<p>\nThe map is then flattened to a sequence of 2-tuples, sorted by the second member of each tuple, and the last element picked up. \n</p>\n","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153108393_1049659205","id":"20161018-205444_178800548","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15182"},{"title":"Solution shown in granular steps","text":"%spark\n\nval transactionsByCustomer = \n        spark.sparkContext.textFile(\"../../../data/data_transactions.txt\")\n        .filter(!_.startsWith(\"transaction date\"))\n        .map(_.split(\"#\"))\n        .map(t => (t(2).toInt, t))\n        \nval m = transactionsByCustomer.countByKey()\n\nprintln(\"\\n\")\n\nval seq = m.toSeq\n\nprintln(\"\\n\")\n\nval sortedSeq = seq.sortBy(_._2)\n\nprintln(\"\\n\")\n\nval ans = sortedSeq.last\n\nprintf(\"Customer %d made the largest number of transactions. He did %d transactions.\\n\", ans._1, ans._2)\n","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153108394_1050813452","id":"20161019-103208_55936394","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15183"},{"title":"Solution as a single pipeline","text":"%spark\n\nval (customerId, purchaseCount) = \n        spark.sparkContext.textFile(\"../../../data/data_transactions.txt\")\n            .filter(!_.startsWith(\"transaction date\"))\n            .map(_.split(\"#\"))\n            .map(t => (t(2).toInt, t))\n            .countByKey()   \n            .toSeq\n            .sortBy(_._2)\n            .last\n\nprintf(\"Customer %d made the largest number of transactions. He did %d transactions.\\n\", customerId, purchaseCount)\n","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153108394_1050813452","id":"20161019-111739_1860889492","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15184"},{"title":"Show transactions involving Barbie Shopping Mall Playsets (product id 10)","text":"%spark\n\ntransactionsByCustomer.collect.foreach(v => {\n    val t = v._2\n    if (t(3).toInt == 10) {\n        printf(\"%s => %.2f\\n\", t(3), t(5).toDouble)\n    }\n})\n","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153108394_1050813452","id":"20161019-115255_1076762662","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15185"},{"title":"Give a 5% discount to customers who bought  2 or more Barbie Shopping Mall Playsets (product id 10)","text":"%spark\n\nval prodId = 10\n\nval transByCust = \n        spark.sparkContext.textFile(\"../../../data/data_transactions.txt\")\n            .filter(!_.startsWith(\"transaction date\"))\n            .map(_.split(\"#\"))\n            .map(t => (t(2).toInt, t))\n\ntransByCust.collect.foreach(v => {\n    val t = v._2\n    if (t(3).toInt == prodId) {\n        printf(\"%s => %.2f\\n\", t(3), t(5).toDouble)\n    }\n})\n\nval transAfterDiscount = transByCust.mapValues(t => {\n    if (t(3).toInt == prodId && t(4).toDouble > 1) {\n        t(5) = (t(5).toDouble * 0.95).toString\n    }\n    t\n})\n\ntransAfterDiscount.collect.foreach(v => {\n    val t = v._2\n    if (t(3).toInt == prodId) {\n        printf(\"%s => %.2f\\n\", t(3), t(5).toDouble)\n    }\n})\n","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153108395_1050428703","id":"20161019-112547_2042277195","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15186"},{"title":"Find the customer that spent the most","text":"%spark\n\nval tByC = \n        spark.sparkContext.textFile(\"../../../data/data_transactions.txt\")\n            .filter(!_.startsWith(\"transaction date\"))\n            .map(_.split(\"#\"))\n            .map(t => (t(2).toInt, t))\n        \ntByC.take(10)\n\nval amounts = tByC.mapValues(t => t(5).toDouble)\n\nprintln(\"\\nAmounts\")\n\namounts.take(10)\n\nval totals = amounts.foldByKey(0)((p1, p2) => p1 + p2).collect()\n\nprintln(\"\\nTotals\")\n\ntotals.take(10)\n\nval totalsSeq = totals.toSeq\n\ntotalsSeq.take(10)\n\nval custSpentMost = totalsSeq.sortBy(_._2).last\n\nprintf(\"\\nCustomer %s spent the most. The amount he spent is $%.2f\\n\", custSpentMost._1, custSpentMost._2.toDouble)\n\n","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153108396_1048504958","id":"20161019-115619_755834342","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15187"},{"title":"Single Pipeline solution","text":"%spark\n\nval custSpentMost = \n        sc.textFile(\"../../../data/data_transactions.txt\")\n            .filter(!_.startsWith(\"transaction date\"))\n            .map(_.split(\"#\"))\n            .map(t => (t(2).toInt, t))\n            .mapValues(t => t(5).toDouble)\n            .foldByKey(0)((p1, p2) => p1 + p2)\n            .collect()\n            .toSeq\n            .sortBy(_._2).last\n        \nprintf(\"\\nCustomer %s spent the most. The amount he spent is $%.2f\\n\", custSpentMost._1, custSpentMost._2.toDouble)\n","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153108396_1048504958","id":"20161020-225243_387507674","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15188"},{"title":"Get list of all products purchased by customers","text":"%spark\n\nval tByC = \n        sc.textFile(\"../../../data/data_transactions.txt\")\n            .filter(!_.startsWith(\"transaction date\"))\n            .map(_.split(\"#\"))\n            .map(t => (t(2).toInt, t))\n        \ntByC.take(10)\n\nval prods = tByC.aggregateByKey(List[String]()) (\n                (prods, t) => prods ::: List(t(3)),\n                (prods1, prods2) => prods1 ::: prods2\n            )\n                \nprods.collect.foreach(v => {\n    println(v._1 + \" => \" + v._2)\n})\n","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153108396_1048504958","id":"20161019-140959_1286778763","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15189"},{"title":"Single Pipeline solution","text":"%spark\n\nval customerPurchases = spark.sparkContext.textFile(\"../../../data/data_transactions.txt\")\n                            .filter(!_.startsWith(\"transaction date\"))\n                            .map(_.split(\"#\"))\n                            .map(t => (t(2).toInt, t))\n                            .aggregateByKey(List[String]()) (\n                                (prods, t) => prods ::: List(t(3)),\n                                (prods1, prods2) => prods1 ::: prods2\n                            )    \n                            .collect\n        \ncustomerPurchases.foreach(v => {\n    println(v._1 + \" => \" + v._2)\n})        \n","dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153108397_1048120209","id":"20161020-225722_1540411274","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15190"},{"dateUpdated":"2018-03-15T18:31:48-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153108397_1048120209","id":"20161018-203416_142363998","dateCreated":"2018-03-15T18:31:48-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15191"}],"name":"Lab 7.4 - RDD - Pair RDDs","id":"2D8W8D844","angularObjects":{"2DAKWKC7R:shared_process":[],"2DANBH7HM:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}