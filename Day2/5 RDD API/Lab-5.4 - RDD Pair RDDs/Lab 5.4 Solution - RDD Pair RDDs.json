{"paragraphs":[{"text":"%md\n\n<h3>Examples illustrating <b>Pair RDDs</b></h3>\n\n<p>\nWe have a data file, <b>data_transactions.txt</b>, containing customer transactions of a store.</p>\n<p>\n<p>\nFirst ten lines from the data file are as follows:\n\n<pre>\n<b>transaction date#time#customer id#product id#quantity#product price</b>\n2015-03-30#6:55 AM#51#68#1#9506.21\n2015-03-30#7:39 PM#99#86#5#4107.59\n2015-03-30#11:57 AM#79#58#7#2987.22\n2015-03-30#12:46 AM#51#50#6#7501.89\n2015-03-30#11:39 AM#86#24#5#8370.2\n2015-03-30#10:35 AM#63#19#5#1023.57\n2015-03-30#2:30 AM#23#77#7#5892.41\n2015-03-30#7:41 PM#49#58#4#9298.18\n2015-03-30#9:18 AM#97#86#8#9462.89\n</pre>\n\nEach line in the file contains the following fields delimited with hash signs:\n\n<ul>\n<li>transaction date</li> \n<li>time</li>\n<li>customer ID</li> \n<li>product ID</li> \n<li>quantity</li>\n<li>product price</li> \n</ul>\n\n</p>\n","user":"anonymous","dateUpdated":"2018-12-25T16:26:15+0200","config":{"tableHide":false,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Examples illustrating <b>Pair RDDs</b></h3>\n<p>\nWe have a data file, <b>data_transactions.txt</b>, containing customer transactions of a store.</p>\n<p><p></p>\n<p>\nFirst ten lines from the data file are as follows:\n\n<pre>\n<b>transaction date#time#customer id#product id#quantity#product price</b>\n2015-03-30#6:55 AM#51#68#1#9506.21\n2015-03-30#7:39 PM#99#86#5#4107.59\n2015-03-30#11:57 AM#79#58#7#2987.22\n2015-03-30#12:46 AM#51#50#6#7501.89\n2015-03-30#11:39 AM#86#24#5#8370.2\n2015-03-30#10:35 AM#63#19#5#1023.57\n2015-03-30#2:30 AM#23#77#7#5892.41\n2015-03-30#7:41 PM#49#58#4#9298.18\n2015-03-30#9:18 AM#97#86#8#9462.89\n</pre>\n\nEach line in the file contains the following fields delimited with hash signs:\n\n<ul>\n<li>transaction date</li> \n<li>time</li>\n<li>customer ID</li> \n<li>product ID</li> \n<li>quantity</li>\n<li>product price</li> \n</ul>\n\n</p>\n"}]},"apps":[],"jobName":"paragraph_1545747975217_-820869976","id":"20161018-203104_1249834388","dateCreated":"2018-12-25T16:26:15+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10414"},{"text":"%md\n\n<h4>Creating Pair RDD</h4>\n\nEach line in the file contains transaction date, time, customer ID, product ID, quantity, and\nthe product price, delimited with hash signs. The following snippet will create a pair RDD with\ncustomer IDs as keys and the complete transaction data as values:\n","user":"anonymous","dateUpdated":"2018-12-25T16:26:15+0200","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Creating Pair RDD</h4>\n<p>Each line in the file contains transaction date, time, customer ID, product ID, quantity, and\n<br  />the product price, delimited with hash signs. The following snippet will create a pair RDD with\n<br  />customer IDs as keys and the complete transaction data as values:</p>\n"}]},"apps":[],"jobName":"paragraph_1545747975217_354241110","id":"20161018-204026_1429116242","dateCreated":"2018-12-25T16:26:15+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10415"},{"text":"%spark\n\nval transactionData = spark.sparkContext.textFile(\"../../../../Data/data_transactions.txt\").filter(!_.startsWith(\"transaction date\")).map(_.split(\"#\"))\n\nvar transactionsByCustomer = transactionData.map(t => (t(2).toInt, t))\n\ntransactionsByCustomer.take(20)\n","user":"anonymous","dateUpdated":"2018-12-25T16:29:30+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"transactionData: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[55] at map at <console>:23\ntransactionsByCustomer: org.apache.spark.rdd.RDD[(Int, Array[String])] = MapPartitionsRDD[56] at map at <console>:25\nres28: Array[(Int, Array[String])] = Array((51,Array(2015-03-30, 6:55 AM, 51, 68, 1, 9506.21)), (99,Array(2015-03-30, 7:39 PM, 99, 86, 5, 4107.59)), (79,Array(2015-03-30, 11:57 AM, 79, 58, 7, 2987.22)), (51,Array(2015-03-30, 12:46 AM, 51, 50, 6, 7501.89)), (86,Array(2015-03-30, 11:39 AM, 86, 24, 5, 8370.2)), (63,Array(2015-03-30, 10:35 AM, 63, 19, 5, 1023.57)), (23,Array(2015-03-30, 2:30 AM, 23, 77, 7, 5892.41)), (49,Array(2015-03-30, 7:41 PM, 49, 58, 4, 9298.18)), (97,Array(2015-03-30, 9:18 AM, 97, 86, 8, 9462.89)), (94,Array(2015-03-30, 10:06 PM, 94, 26, 4, 4199.15)), (91,Array(2015-03-30, 10:57 AM, 91, 18, 1, 3795.73)), (20,Array(2015-03-30, 7:43 AM, 20, 86, 10, 1477.35)), (38,Array(2015-03-30, 5:58 PM, 38, 39, 6, 1090.0)), (46,Array(2015-03-30, 1:08 PM, 46, 6, 10, 1014.78)), (56,Arr..."}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4041/jobs/job?id=10"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545747975218_1296251120","id":"20161018-204136_1241756262","dateCreated":"2018-12-25T16:26:15+0200","dateStarted":"2018-12-25T16:29:30+0200","dateFinished":"2018-12-25T16:29:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10416"},{"text":"%md\n\n<h4>Getting keys and values from pair RDD</h4>\n\n<p>\nNow that we have the pair RDD, let us first see how many customers actually\nbought anything the previous day.\n</p>\n<p>\nWe can get a new RDD containing only the keys or only the\nvalues with pair RDD transformations named <b>keys</b> and <b>values</b>.\n</p>\n<p>\nSo we use this line to get a list of customer IDs, remove any duplicates and count the\nnumber of unique customer IDs:\n</p>","user":"anonymous","dateUpdated":"2018-12-25T16:26:15+0200","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Getting keys and values from pair RDD</h4>\n<p>\nNow that we have the pair RDD, let us first see how many customers actually\nbought anything the previous day.\n</p>\n<p>\nWe can get a new RDD containing only the keys or only the\nvalues with pair RDD transformations named <b>keys</b> and <b>values</b>.\n</p>\n<p>\nSo we use this line to get a list of customer IDs, remove any duplicates and count the\nnumber of unique customer IDs:\n</p>\n"}]},"apps":[],"jobName":"paragraph_1545747975218_1396435527","id":"20161018-204659_1317533356","dateCreated":"2018-12-25T16:26:15+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10417"},{"text":"%spark\n\nval keysOfTransactions = transactionsByCustomer.keys\n\nkeysOfTransactions.collect\n\nval distinctKeys = keysOfTransactions.distinct()\n\ndistinctKeys.collect\n\nval keyCount = distinctKeys.count()","user":"anonymous","dateUpdated":"2018-12-25T16:29:40+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"keysOfTransactions: org.apache.spark.rdd.RDD[Int] = MapPartitionsRDD[57] at keys at <console>:27\nres30: Array[Int] = Array(51, 99, 79, 51, 86, 63, 23, 49, 97, 94, 91, 20, 38, 46, 56, 11, 59, 8, 23, 85, 27, 84, 54, 74, 6, 35, 35, 99, 39, 47, 17, 11, 40, 46, 57, 80, 87, 52, 30, 62, 6, 51, 41, 71, 61, 95, 52, 99, 5, 94, 2, 95, 78, 13, 23, 4, 38, 100, 86, 19, 98, 53, 89, 15, 74, 17, 45, 61, 99, 12, 79, 54, 15, 32, 11, 32, 16, 4, 8, 1, 72, 2, 14, 7, 99, 28, 47, 43, 14, 63, 19, 93, 87, 11, 1, 51, 15, 61, 49, 70, 73, 28, 43, 54, 1, 65, 50, 51, 95, 95, 2, 3, 56, 84, 69, 80, 91, 91, 5, 16, 60, 76, 45, 32, 61, 20, 100, 49, 66, 23, 90, 10, 89, 34, 83, 100, 19, 4, 63, 64, 94, 62, 7, 47, 78, 84, 18, 57, 56, 32, 51, 69, 81, 23, 56, 19, 3, 70, 50, 63, 34, 71, 44, 21, 81, 5, 23, 34, 88, 58, 53, 98, 94, 97, 85, 74, 24, 90, 21, 80, 2, 97, 8, 70, 26, 15, 77, 100, 36, 26, 60, 13, 73, 22, 24, 20, 62, 3...distinctKeys: org.apache.spark.rdd.RDD[Int] = MapPartitionsRDD[60] at distinct at <console>:29\nres31: Array[Int] = Array(34, 52, 96, 4, 16, 82, 66, 28, 54, 80, 98, 30, 14, 50, 36, 24, 64, 92, 74, 90, 72, 70, 18, 12, 38, 20, 78, 10, 94, 84, 100, 56, 76, 22, 46, 48, 32, 62, 42, 40, 6, 8, 86, 58, 44, 88, 60, 26, 68, 2, 13, 19, 39, 81, 71, 55, 29, 79, 65, 11, 35, 57, 51, 37, 75, 45, 1, 89, 63, 83, 17, 9, 49, 43, 99, 41, 61, 15, 21, 47, 77, 53, 97, 25, 95, 59, 73, 27, 93, 33, 23, 67, 69, 3, 7, 85, 91, 31, 87, 5)\nkeyCount: Long = 100\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4041/jobs/job?id=11","http://192.168.9.185:4041/jobs/job?id=12","http://192.168.9.185:4041/jobs/job?id=13"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545747975219_-107586004","id":"20161018-204927_2119367398","dateCreated":"2018-12-25T16:26:15+0200","dateStarted":"2018-12-25T16:29:40+0200","dateFinished":"2018-12-25T16:29:42+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10418"},{"title":"Find the customer who made the most transactions","text":"%md\n\n<p>\nEach line in the transactions file is one transaction. \n</p>\n<p>\nWe first compute the transaction count for each customer using the <b>countByKey</b> action.\n</p>\n<p>\nThe map is then flattened to a sequence of 2-tuples, sorted by the second member of each tuple, and the last element picked up. \n</p>\n","user":"anonymous","dateUpdated":"2018-12-25T16:26:15+0200","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545747975219_-1447829768","id":"20161018-205444_178800548","dateCreated":"2018-12-25T16:26:15+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10419"},{"title":"Solution shown in granular steps","text":"%spark\n\nval transactionsByCustomer = \n        spark.sparkContext.textFile(\"../../../../Data/data_transactions.txt\").filter(!_.startsWith(\"transaction date\")).map(_.split(\"#\")).map(t => (t(2).toInt, t))\n        \nval m = transactionsByCustomer.countByKey()\n\nprintln(\"\\n\")\n\nval seq = m.toSeq\n\nprintln(\"\\n\")\n\nval sortedSeq = seq.sortBy(_._2)\n\nprintln(\"\\n\")\n\nval ans = sortedSeq.last\n\nprintf(\"Customer %d made the largest number of transactions. He did %d transactions.\\n\", ans._1, ans._2)\n","user":"anonymous","dateUpdated":"2018-12-25T16:30:21+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"transactionsByCustomer: org.apache.spark.rdd.RDD[(Int, Array[String])] = MapPartitionsRDD[67] at map at <console>:25\nm: scala.collection.Map[Int,Long] = Map(69 -> 7, 88 -> 5, 5 -> 11, 10 -> 7, 56 -> 17, 42 -> 7, 24 -> 9, 37 -> 7, 25 -> 12, 52 -> 9, 14 -> 8, 20 -> 8, 46 -> 9, 93 -> 12, 57 -> 8, 78 -> 11, 29 -> 9, 84 -> 9, 61 -> 8, 89 -> 9, 1 -> 9, 74 -> 11, 6 -> 7, 60 -> 4, 85 -> 9, 28 -> 11, 38 -> 9, 70 -> 8, 21 -> 13, 33 -> 9, 92 -> 8, 65 -> 10, 97 -> 12, 9 -> 7, 53 -> 19, 77 -> 11, 96 -> 8, 13 -> 12, 41 -> 12, 73 -> 7, 2 -> 15, 32 -> 14, 34 -> 14, 45 -> 11, 64 -> 10, 17 -> 13, 22 -> 10, 44 -> 8, 59 -> 9, 27 -> 7, 71 -> 10, 12 -> 7, 54 -> 7, 49 -> 8, 86 -> 9, 81 -> 9, 76 -> 15, 7 -> 10, 39 -> 11, 98 -> 11, 91 -> 13, 66 -> 11, 3 -> 13, 80 -> 7, 35 -> 10, 48 -> 5, 63 -> 12, 18 -> 9, 95 -> 8, 50 -> 14, 67 -> 5, 16 -> 8, 31 -> 14, 11 -> 8, 72 -> 7, 43 -> 12, 99 -> 12, 87 -> 10, 40 -> 10, 26 -> 11, 55 -> ...\n\nseq: Seq[(Int, Long)] = ArrayBuffer((69,7), (88,5), (5,11), (10,7), (56,17), (42,7), (24,9), (37,7), (25,12), (52,9), (14,8), (20,8), (46,9), (93,12), (57,8), (78,11), (29,9), (84,9), (61,8), (89,9), (1,9), (74,11), (6,7), (60,4), (85,9), (28,11), (38,9), (70,8), (21,13), (33,9), (92,8), (65,10), (97,12), (9,7), (53,19), (77,11), (96,8), (13,12), (41,12), (73,7), (2,15), (32,14), (34,14), (45,11), (64,10), (17,13), (22,10), (44,8), (59,9), (27,7), (71,10), (12,7), (54,7), (49,8), (86,9), (81,9), (76,15), (7,10), (39,11), (98,11), (91,13), (66,11), (3,13), (80,7), (35,10), (48,5), (63,12), (18,9), (95,8), (50,14), (67,5), (16,8), (31,14), (11,8), (72,7), (43,12), (99,12), (87,10), (40,10), (26,11), (55,13), (23,13), (8,10), (75,10), (58,13), (82,13), (36,5), (30,5), (51,18), (19,6), (4,1...\n\nsortedSeq: Seq[(Int, Long)] = ArrayBuffer((60,4), (88,5), (48,5), (67,5), (36,5), (30,5), (19,6), (62,6), (69,7), (10,7), (42,7), (37,7), (6,7), (9,7), (73,7), (27,7), (12,7), (54,7), (80,7), (72,7), (14,8), (20,8), (57,8), (61,8), (70,8), (92,8), (96,8), (44,8), (49,8), (95,8), (16,8), (11,8), (90,8), (24,9), (52,9), (46,9), (29,9), (84,9), (89,9), (1,9), (85,9), (38,9), (33,9), (59,9), (86,9), (81,9), (18,9), (65,10), (64,10), (22,10), (71,10), (7,10), (35,10), (87,10), (40,10), (8,10), (75,10), (15,10), (5,11), (78,11), (74,11), (28,11), (77,11), (45,11), (39,11), (98,11), (66,11), (26,11), (4,11), (25,12), (93,12), (97,12), (13,12), (41,12), (63,12), (43,12), (99,12), (94,12), (68,12), (83,12), (100,12), (21,13), (17,13), (91,13), (3,13), (55,13), (23,13), (58,13), (82,13), (79,13),...\n\nans: (Int, Long) = (53,19)\nCustomer 53 made the largest number of transactions. He did 19 transactions.\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4041/jobs/job?id=14"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545747975219_682991192","id":"20161019-103208_55936394","dateCreated":"2018-12-25T16:26:15+0200","dateStarted":"2018-12-25T16:30:21+0200","dateFinished":"2018-12-25T16:30:25+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10420"},{"title":"Solution as a single pipeline","text":"%spark\n\nval (customerId, purchaseCount) = \n        spark.sparkContext.textFile(\"../../../../Data/data_transactions.txt\").filter(!_.startsWith(\"transaction date\")).map(_.split(\"#\")).map(t => (t(2).toInt, t)).countByKey().toSeq.sortBy(_._2).last\n\nprintf(\"Customer %d made the largest number of transactions. He did %d transactions.\\n\", customerId, purchaseCount)\n","user":"anonymous","dateUpdated":"2018-12-25T16:31:18+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"customerId: Int = 53\npurchaseCount: Long = 19\nCustomer 53 made the largest number of transactions. He did 19 transactions.\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4041/jobs/job?id=15"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545747975220_2045441183","id":"20161019-111739_1860889492","dateCreated":"2018-12-25T16:26:15+0200","dateStarted":"2018-12-25T16:31:18+0200","dateFinished":"2018-12-25T16:31:20+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10421"},{"title":"Show transactions involving Barbie Shopping Mall Playsets (product id 10)","text":"%spark\n\ntransactionsByCustomer.collect.foreach(v => {\n    val t = v._2\n    if (t(3).toInt == 10) {\n        printf(\"%s => %.2f\\n\", t(3), t(5).toDouble)\n    }\n})\n","user":"anonymous","dateUpdated":"2018-12-25T16:31:25+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"10 => 9637.96\n10 => 5543.06\n10 => 4998.03\n10 => 6324.28\n10 => 9101.62\n10 => 2398.73\n10 => 2604.97\n10 => 6476.94\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4041/jobs/job?id=16"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545747975220_51511306","id":"20161019-115255_1076762662","dateCreated":"2018-12-25T16:26:15+0200","dateStarted":"2018-12-25T16:31:25+0200","dateFinished":"2018-12-25T16:31:26+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10422"},{"title":"Give a 5% discount to customers who bought  2 or more Barbie Shopping Mall Playsets (product id 10)","text":"%spark\n\nval prodId = 10\n\nval transByCust = \n        spark.sparkContext.textFile(\"../../../../Data/data_transactions.txt\").filter(!_.startsWith(\"transaction date\")).map(_.split(\"#\")).map(t => (t(2).toInt, t))\n\ntransByCust.collect.foreach(v => {\n    val t = v._2\n    if (t(3).toInt == prodId) {\n        printf(\"%s => %.2f\\n\", t(3), t(5).toDouble)\n    }\n})\n\nval transAfterDiscount = transByCust.mapValues(t => {\n    if (t(3).toInt == prodId && t(4).toDouble > 1) {\n        t(5) = (t(5).toDouble * 0.95).toString\n    }\n    t\n})\n\ntransAfterDiscount.collect.foreach(v => {\n    val t = v._2\n    if (t(3).toInt == prodId) {\n        printf(\"%s => %.2f\\n\", t(3), t(5).toDouble)\n    }\n})\n","user":"anonymous","dateUpdated":"2018-12-25T16:31:48+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"prodId: Int = 10\ntransByCust: org.apache.spark.rdd.RDD[(Int, Array[String])] = MapPartitionsRDD[81] at map at <console>:25\n10 => 9637.96\n10 => 5543.06\n10 => 4998.03\n10 => 6324.28\n10 => 9101.62\n10 => 2398.73\n10 => 2604.97\n10 => 6476.94\ntransAfterDiscount: org.apache.spark.rdd.RDD[(Int, Array[String])] = MapPartitionsRDD[82] at mapValues at <console>:28\n10 => 9156.06\n10 => 5265.91\n10 => 4748.13\n10 => 6008.07\n10 => 9101.62\n10 => 2278.79\n10 => 2604.97\n10 => 6153.09\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4041/jobs/job?id=17","http://192.168.9.185:4041/jobs/job?id=18"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545747975221_-1316359788","id":"20161019-112547_2042277195","dateCreated":"2018-12-25T16:26:15+0200","dateStarted":"2018-12-25T16:31:48+0200","dateFinished":"2018-12-25T16:31:51+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10423"},{"title":"Find the customer that spent the most","text":"%spark\n\nval tByC = \n        spark.sparkContext.textFile(\"../../../../Data/data_transactions.txt\").filter(!_.startsWith(\"transaction date\")).map(_.split(\"#\")).map(t => (t(2).toInt, t))\n        \ntByC.take(10)\n\nval amounts = tByC.mapValues(t => t(5).toDouble)\n\nprintln(\"\\nAmounts\")\n\namounts.take(10)\n\nval totals = amounts.foldByKey(0)((p1, p2) => p1 + p2).collect()\n\nprintln(\"\\nTotals\")\n\ntotals.take(10)\n\nval totalsSeq = totals.toSeq\n\ntotalsSeq.take(10)\n\nval custSpentMost = totalsSeq.sortBy(_._2).last\n\nprintf(\"\\nCustomer %s spent the most. The amount he spent is $%.2f\\n\", custSpentMost._1, custSpentMost._2.toDouble)\n\n","user":"anonymous","dateUpdated":"2018-12-25T16:32:20+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"tByC: org.apache.spark.rdd.RDD[(Int, Array[String])] = MapPartitionsRDD[87] at map at <console>:25\nres45: Array[(Int, Array[String])] = Array((51,Array(2015-03-30, 6:55 AM, 51, 68, 1, 9506.21)), (99,Array(2015-03-30, 7:39 PM, 99, 86, 5, 4107.59)), (79,Array(2015-03-30, 11:57 AM, 79, 58, 7, 2987.22)), (51,Array(2015-03-30, 12:46 AM, 51, 50, 6, 7501.89)), (86,Array(2015-03-30, 11:39 AM, 86, 24, 5, 8370.2)), (63,Array(2015-03-30, 10:35 AM, 63, 19, 5, 1023.57)), (23,Array(2015-03-30, 2:30 AM, 23, 77, 7, 5892.41)), (49,Array(2015-03-30, 7:41 PM, 49, 58, 4, 9298.18)), (97,Array(2015-03-30, 9:18 AM, 97, 86, 8, 9462.89)), (94,Array(2015-03-30, 10:06 PM, 94, 26, 4, 4199.15)))\namounts: org.apache.spark.rdd.RDD[(Int, Double)] = MapPartitionsRDD[88] at mapValues at <console>:25\n\nAmounts\nres47: Array[(Int, Double)] = Array((51,9506.21), (99,4107.59), (79,2987.22), (51,7501.89), (86,8370.2), (63,1023.57), (23,5892.41), (49,9298.18), (97,9462.89), (94,4199.15))\ntotals: Array[(Int, Double)] = Array((34,77332.59), (52,58348.020000000004), (96,36928.57), (4,41801.35), (16,40696.020000000004), (82,58722.58), (66,52130.009999999995), (28,45534.299999999996), (54,36307.04), (80,31794.62), (98,56245.61), (30,19194.91), (14,48658.43000000001), (50,76157.68000000001), (36,25640.04), (24,39375.28), (64,45203.1), (92,43517.88), (74,63748.35), (90,39947.380000000005), (72,32216.130000000005), (70,46806.009999999995), (18,35827.33), (12,35521.35), (38,59110.46000000001), (20,32997.8), (78,48047.53), (10,46120.25), (94,51430.14000000001), (84,53020.619999999995), (100,60120.66), (56,85906.94), (76,100049.0), (22,43987.57), (46,36687.53), (48,17949.850000000002), (32,77805.33), (62,35188.689999999995), (42,30491.92), (40,52212.09), (6,30549.28), (8,38603.81)...\nTotals\nres49: Array[(Int, Double)] = Array((34,77332.59), (52,58348.020000000004), (96,36928.57), (4,41801.35), (16,40696.020000000004), (82,58722.58), (66,52130.009999999995), (28,45534.299999999996), (54,36307.04), (80,31794.62))\ntotalsSeq: Seq[(Int, Double)] = WrappedArray((34,77332.59), (52,58348.020000000004), (96,36928.57), (4,41801.35), (16,40696.020000000004), (82,58722.58), (66,52130.009999999995), (28,45534.299999999996), (54,36307.04), (80,31794.62), (98,56245.61), (30,19194.91), (14,48658.43000000001), (50,76157.68000000001), (36,25640.04), (24,39375.28), (64,45203.1), (92,43517.88), (74,63748.35), (90,39947.380000000005), (72,32216.130000000005), (70,46806.009999999995), (18,35827.33), (12,35521.35), (38,59110.46000000001), (20,32997.8), (78,48047.53), (10,46120.25), (94,51430.14000000001), (84,53020.619999999995), (100,60120.66), (56,85906.94), (76,100049.0), (22,43987.57), (46,36687.53), (48,17949.850000000002), (32,77805.33), (62,35188.689999999995), (42,30491.92), (40,52212.09), (6,30549.28), (8,3...res50: Seq[(Int, Double)] = WrappedArray((34,77332.59), (52,58348.020000000004), (96,36928.57), (4,41801.35), (16,40696.020000000004), (82,58722.58), (66,52130.009999999995), (28,45534.299999999996), (54,36307.04), (80,31794.62))\ncustSpentMost: (Int, Double) = (76,100049.0)\n\nCustomer 76 spent the most. The amount he spent is $100049.00\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4041/jobs/job?id=19","http://192.168.9.185:4041/jobs/job?id=20","http://192.168.9.185:4041/jobs/job?id=21"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545747975221_-760003105","id":"20161019-115619_755834342","dateCreated":"2018-12-25T16:26:15+0200","dateStarted":"2018-12-25T16:32:20+0200","dateFinished":"2018-12-25T16:32:25+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10424"},{"title":"Single Pipeline solution","text":"%spark\n\nval custSpentMost = \n        sc.textFile(\"../../../../Data/data_transactions.txt\").filter(!_.startsWith(\"transaction date\")).map(_.split(\"#\")).map(t => (t(2).toInt, t)).mapValues(t => t(5).toDouble).foldByKey(0)((p1, p2) => p1 + p2).collect().toSeq.sortBy(_._2).last\n        \nprintf(\"\\nCustomer %s spent the most. The amount he spent is $%.2f\\n\", custSpentMost._1, custSpentMost._2.toDouble)\n","user":"anonymous","dateUpdated":"2018-12-25T16:33:25+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"custSpentMost: (Int, Double) = (76,100049.0)\n\nCustomer 76 spent the most. The amount he spent is $100049.00\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4041/jobs/job?id=22"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545747975222_486575753","id":"20161020-225243_387507674","dateCreated":"2018-12-25T16:26:15+0200","dateStarted":"2018-12-25T16:33:25+0200","dateFinished":"2018-12-25T16:33:26+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10425"},{"title":"Get list of all products purchased by customers","text":"%spark\n\nval tByC = \n        sc.textFile(\"../../../../Data/data_transactions.txt\").filter(!_.startsWith(\"transaction date\")).map(_.split(\"#\")).map(t => (t(2).toInt, t))\n        \ntByC.take(10)\n\nval prods = tByC.aggregateByKey(List[String]()) (\n                (prods, t) => prods ::: List(t(3)),\n                (prods1, prods2) => prods1 ::: prods2\n            )\n                \nprods.collect.foreach(v => {\n    println(v._1 + \" => \" + v._2)\n})\n","user":"anonymous","dateUpdated":"2018-12-25T16:33:54+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"tByC: org.apache.spark.rdd.RDD[(Int, Array[String])] = MapPartitionsRDD[101] at map at <console>:27\nres55: Array[(Int, Array[String])] = Array((51,Array(2015-03-30, 6:55 AM, 51, 68, 1, 9506.21)), (99,Array(2015-03-30, 7:39 PM, 99, 86, 5, 4107.59)), (79,Array(2015-03-30, 11:57 AM, 79, 58, 7, 2987.22)), (51,Array(2015-03-30, 12:46 AM, 51, 50, 6, 7501.89)), (86,Array(2015-03-30, 11:39 AM, 86, 24, 5, 8370.2)), (63,Array(2015-03-30, 10:35 AM, 63, 19, 5, 1023.57)), (23,Array(2015-03-30, 2:30 AM, 23, 77, 7, 5892.41)), (49,Array(2015-03-30, 7:41 PM, 49, 58, 4, 9298.18)), (97,Array(2015-03-30, 9:18 AM, 97, 86, 8, 9462.89)), (94,Array(2015-03-30, 10:06 PM, 94, 26, 4, 4199.15)))\nprods: org.apache.spark.rdd.RDD[(Int, List[String])] = ShuffledRDD[102] at aggregateByKey at <console>:28\n34 => List(34, 99, 66, 58, 59, 17, 58, 5, 38, 58, 93, 22, 48, 50)\n52 => List(37, 69, 82, 11, 19, 58, 67, 51, 93)\n96 => List(37, 31, 17, 88, 97, 81, 58, 78)\n4 => List(16, 86, 19, 49, 99, 2, 94, 35, 4, 10, 7)\n16 => List(97, 97, 84, 75, 72, 28, 94, 81)\n82 => List(57, 44, 51, 57, 41, 15, 99, 28, 81, 65, 97, 100, 90)\n66 => List(38, 78, 17, 29, 62, 44, 55, 19, 62, 86, 58)\n28 => List(76, 18, 55, 97, 61, 17, 87, 27, 95, 11, 14)\n54 => List(78, 57, 51, 4, 98, 46, 47)\n80 => List(83, 89, 6, 44, 79, 96, 12)\n98 => List(55, 85, 13, 11, 64, 82, 87, 74, 7, 45, 77)\n30 => List(82, 74, 1, 97, 51)\n14 => List(38, 55, 52, 75, 96, 42, 12, 29)\n50 => List(86, 38, 78, 89, 22, 94, 98, 6, 26, 27, 84, 45, 14, 58)\n36 => List(84, 86, 57, 91, 98)\n24 => List(58, 76, 29, 39, 1, 4, 23, 60, 30)\n64 => List(28, 75, 85, 62, 93, 53, 71, 76, 53, 58)\n92 => List(94, 30, 1, 17, 29, 52, 99, 90)\n74 => List(9, 23, 30, 23, 34, 22, 59, 86, 14, 13, 95)\n90 => List(34, 65, 66, 46, 99, 99, 28, 5)\n72 => List(13, 57, 9, 94, 46, 30, 26)\n70 => List(14, 6, 96, 5, 13, 88, 60, 35)\n18 => List(32, 12, 68, 62, 89, 87, 98, 42, 31)\n12 => List(62, 26, 99, 31, 26, 88, 86)\n38 => List(39, 41, 9, 1, 66, 69, 44, 13, 76)\n20 => List(86, 29, 16, 38, 35, 34, 41, 100)\n78 => List(97, 6, 44, 97, 60, 29, 99, 42, 4, 5, 98)\n10 => List(1, 36, 83, 17, 46, 30, 81)\n94 => List(26, 49, 58, 74, 38, 99, 70, 13, 4, 72, 70, 97)\n84 => List(55, 10, 14, 62, 79, 59, 92, 81, 50)\n100 => List(61, 10, 65, 96, 27, 27, 25, 98, 59, 31, 51, 58)\n56 => List(48, 28, 62, 67, 57, 26, 93, 65, 89, 44, 57, 54, 75, 81, 55, 61, 56)\n76 => List(12, 65, 93, 88, 89, 57, 49, 78, 37, 93, 58, 58, 93, 23, 58)\n22 => List(98, 93, 11, 81, 52, 57, 23, 7, 25, 82)\n46 => List(6, 39, 88, 50, 28, 100, 51, 65, 37)\n48 => List(16, 7, 47, 52, 62)\n32 => List(94, 19, 17, 18, 32, 83, 85, 44, 47, 70, 8, 34, 68, 25)\n62 => List(2, 33, 11, 99, 73, 88)\n42 => List(64, 32, 19, 28, 64, 25, 86)\n40 => List(93, 76, 85, 55, 65, 69, 50, 26, 96, 62)\n6 => List(90, 47, 38, 15, 55, 28, 51)\n8 => List(35, 93, 45, 92, 65, 65, 93, 84, 44, 22)\n86 => List(24, 19, 34, 73, 8, 69, 45, 15, 1)\n58 => List(69, 69, 6, 45, 95, 36, 34, 5, 30, 88, 93, 22, 32)\n44 => List(52, 17, 77, 98, 68, 61, 91, 13)\n88 => List(41, 28, 81, 95, 96)\n60 => List(53, 26, 7, 89)\n26 => List(34, 76, 35, 50, 55, 30, 51, 72, 28, 89, 68)\n68 => List(57, 7, 90, 57, 11, 55, 58, 62, 25, 58, 34, 84)\n2 => List(5, 49, 64, 48, 1, 53, 67, 48, 6, 65, 31, 15, 60, 79, 74)\n13 => List(79, 72, 58, 17, 45, 85, 45, 67, 36, 44, 27, 53)\n19 => List(26, 58, 6, 22, 74, 18)\n39 => List(28, 92, 87, 58, 4, 28, 11, 56, 5, 4, 50)\n81 => List(44, 6, 29, 82, 12, 69, 58, 91, 36)\n71 => List(96, 86, 42, 52, 86, 18, 60, 30, 19, 100)\n55 => List(51, 59, 100, 2, 44, 100, 65, 4, 83, 23, 61, 48, 92)\n29 => List(50, 48, 22, 44, 100, 79, 14, 64, 58)\n79 => List(58, 7, 92, 34, 48, 9, 84, 58, 7, 6, 65, 51, 50)\n65 => List(39, 86, 41, 18, 89, 90, 52, 61, 94, 93)\n11 => List(58, 44, 22, 69, 72, 27, 66, 78)\n35 => List(64, 99, 56, 22, 86, 37, 19, 80, 64, 57)\n57 => List(90, 17, 11, 50, 82, 80, 35, 60)\n51 => List(68, 50, 44, 77, 1, 58, 58, 14, 75, 85, 10, 96, 58, 6, 36, 87, 81, 69)\n37 => List(8, 60, 24, 40, 58, 49, 29)\n75 => List(30, 49, 93, 37, 95, 28, 61, 36, 25, 73)\n45 => List(47, 13, 52, 58, 100, 59, 34, 80, 22, 7, 56)\n1 => List(45, 19, 39, 60, 14, 1, 89, 82, 57)\n89 => List(10, 85, 91, 46, 19, 14, 53, 30, 51)\n63 => List(19, 68, 52, 1, 4, 61, 79, 15, 24, 59, 31, 46)\n83 => List(28, 7, 98, 31, 40, 83, 17, 13, 34, 30, 68, 1)\n17 => List(32, 47, 58, 25, 98, 62, 68, 4, 46, 28, 52, 44, 15)\n9 => List(38, 33, 95, 55, 66, 60, 15)\n49 => List(58, 10, 48, 37, 38, 34, 91, 67)\n43 => List(92, 46, 84, 68, 66, 26, 77, 24, 59, 58, 61, 70)\n99 => List(86, 55, 32, 62, 10, 37, 82, 73, 68, 96, 53, 1)\n41 => List(62, 91, 59, 16, 60, 31, 71, 11, 28, 36, 75, 77)\n61 => List(47, 75, 87, 23, 78, 41, 73, 96)\n15 => List(13, 24, 16, 4, 48, 44, 59, 39, 4, 57)\n21 => List(44, 46, 21, 28, 7, 44, 89, 38, 27, 69, 84, 64, 59)\n47 => List(4, 75, 50, 91, 79, 78, 82, 8, 2, 44, 16, 81, 44)\n77 => List(33, 18, 1, 29, 87, 4, 81, 49, 58, 25, 61)\n53 => List(42, 44, 59, 31, 33, 93, 72, 94, 38, 12, 47, 30, 58, 18, 68, 40, 85, 100, 100)\n97 => List(86, 80, 100, 54, 55, 1, 2, 24, 53, 91, 11, 44)\n25 => List(25, 16, 59, 15, 91, 29, 40, 100, 16, 45, 78, 9)\n95 => List(88, 42, 86, 90, 12, 54, 92, 98)\n59 => List(9, 61, 40, 11, 46, 8, 25, 92, 9)\n73 => List(76, 2, 73, 59, 29, 10, 62)\n27 => List(1, 84, 26, 70, 24, 24, 59)\n93 => List(80, 71, 23, 77, 38, 25, 23, 89, 72, 30, 59, 44)\n33 => List(28, 71, 60, 87, 17, 44, 41, 91, 7)\n23 => List(77, 8, 80, 6, 100, 56, 31, 77, 85, 57, 78, 98, 96)\n67 => List(46, 7, 44, 87, 58)\n69 => List(77, 15, 56, 37, 74, 68, 40)\n3 => List(57, 86, 30, 95, 28, 100, 79, 69, 65, 11, 6, 99, 26)\n7 => List(2, 75, 48, 93, 91, 45, 7, 31, 58, 64)\n85 => List(93, 81, 76, 84, 69, 93, 7, 22, 8)\n91 => List(18, 99, 8, 65, 58, 89, 88, 88, 64, 54, 30, 5, 12)\n31 => List(22, 40, 90, 66, 76, 53, 58, 1, 41, 70, 62, 76, 58, 82)\n87 => List(88, 4, 31, 69, 39, 85, 15, 14, 67, 37)\n5 => List(26, 84, 30, 50, 22, 84, 96, 24, 93, 18, 86)\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4041/jobs/job?id=23","http://192.168.9.185:4041/jobs/job?id=24"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545747975222_447030093","id":"20161019-140959_1286778763","dateCreated":"2018-12-25T16:26:15+0200","dateStarted":"2018-12-25T16:33:54+0200","dateFinished":"2018-12-25T16:33:57+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10426"},{"title":"Single Pipeline solution","text":"%spark\n\nval customerPurchases = spark.sparkContext.textFile(\"../../../../Data/data_transactions.txt\").filter(!_.startsWith(\"transaction date\")).map(_.split(\"#\")).map(t => (t(2).toInt, t)).aggregateByKey(List[String]()) ((prods, t) => prods ::: List(t(3)),(prods1, prods2) => prods1 ::: prods2).collect\n        \ncustomerPurchases.foreach(v => {\n    println(v._1 + \" => \" + v._2)\n})        \n","user":"anonymous","dateUpdated":"2018-12-25T16:35:27+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"customerPurchases: Array[(Int, List[String])] = Array((34,List(34, 99, 66, 58, 59, 17, 58, 5, 38, 58, 93, 22, 48, 50)), (52,List(37, 69, 82, 11, 19, 58, 67, 51, 93)), (96,List(37, 31, 17, 88, 97, 81, 58, 78)), (4,List(16, 86, 19, 49, 99, 2, 94, 35, 4, 10, 7)), (16,List(97, 97, 84, 75, 72, 28, 94, 81)), (82,List(57, 44, 51, 57, 41, 15, 99, 28, 81, 65, 97, 100, 90)), (66,List(38, 78, 17, 29, 62, 44, 55, 19, 62, 86, 58)), (28,List(76, 18, 55, 97, 61, 17, 87, 27, 95, 11, 14)), (54,List(78, 57, 51, 4, 98, 46, 47)), (80,List(83, 89, 6, 44, 79, 96, 12)), (98,List(55, 85, 13, 11, 64, 82, 87, 74, 7, 45, 77)), (30,List(82, 74, 1, 97, 51)), (14,List(38, 55, 52, 75, 96, 42, 12, 29)), (50,List(86, 38, 78, 89, 22, 94, 98, 6, 26, 27, 84, 45, 14, 58)), (36,List(84, 86, 57, 91, 98)), (24,List(58, 76, 29...34 => List(34, 99, 66, 58, 59, 17, 58, 5, 38, 58, 93, 22, 48, 50)\n52 => List(37, 69, 82, 11, 19, 58, 67, 51, 93)\n96 => List(37, 31, 17, 88, 97, 81, 58, 78)\n4 => List(16, 86, 19, 49, 99, 2, 94, 35, 4, 10, 7)\n16 => List(97, 97, 84, 75, 72, 28, 94, 81)\n82 => List(57, 44, 51, 57, 41, 15, 99, 28, 81, 65, 97, 100, 90)\n66 => List(38, 78, 17, 29, 62, 44, 55, 19, 62, 86, 58)\n28 => List(76, 18, 55, 97, 61, 17, 87, 27, 95, 11, 14)\n54 => List(78, 57, 51, 4, 98, 46, 47)\n80 => List(83, 89, 6, 44, 79, 96, 12)\n98 => List(55, 85, 13, 11, 64, 82, 87, 74, 7, 45, 77)\n30 => List(82, 74, 1, 97, 51)\n14 => List(38, 55, 52, 75, 96, 42, 12, 29)\n50 => List(86, 38, 78, 89, 22, 94, 98, 6, 26, 27, 84, 45, 14, 58)\n36 => List(84, 86, 57, 91, 98)\n24 => List(58, 76, 29, 39, 1, 4, 23, 60, 30)\n64 => List(28, 75, 85, 62, 93, 53, 71, 76, 53, 58)\n92 => List(94, 30, 1, 17, 29, 52, 99, 90)\n74 => List(9, 23, 30, 23, 34, 22, 59, 86, 14, 13, 95)\n90 => List(34, 65, 66, 46, 99, 99, 28, 5)\n72 => List(13, 57, 9, 94, 46, 30, 26)\n70 => List(14, 6, 96, 5, 13, 88, 60, 35)\n18 => List(32, 12, 68, 62, 89, 87, 98, 42, 31)\n12 => List(62, 26, 99, 31, 26, 88, 86)\n38 => List(39, 41, 9, 1, 66, 69, 44, 13, 76)\n20 => List(86, 29, 16, 38, 35, 34, 41, 100)\n78 => List(97, 6, 44, 97, 60, 29, 99, 42, 4, 5, 98)\n10 => List(1, 36, 83, 17, 46, 30, 81)\n94 => List(26, 49, 58, 74, 38, 99, 70, 13, 4, 72, 70, 97)\n84 => List(55, 10, 14, 62, 79, 59, 92, 81, 50)\n100 => List(61, 10, 65, 96, 27, 27, 25, 98, 59, 31, 51, 58)\n56 => List(48, 28, 62, 67, 57, 26, 93, 65, 89, 44, 57, 54, 75, 81, 55, 61, 56)\n76 => List(12, 65, 93, 88, 89, 57, 49, 78, 37, 93, 58, 58, 93, 23, 58)\n22 => List(98, 93, 11, 81, 52, 57, 23, 7, 25, 82)\n46 => List(6, 39, 88, 50, 28, 100, 51, 65, 37)\n48 => List(16, 7, 47, 52, 62)\n32 => List(94, 19, 17, 18, 32, 83, 85, 44, 47, 70, 8, 34, 68, 25)\n62 => List(2, 33, 11, 99, 73, 88)\n42 => List(64, 32, 19, 28, 64, 25, 86)\n40 => List(93, 76, 85, 55, 65, 69, 50, 26, 96, 62)\n6 => List(90, 47, 38, 15, 55, 28, 51)\n8 => List(35, 93, 45, 92, 65, 65, 93, 84, 44, 22)\n86 => List(24, 19, 34, 73, 8, 69, 45, 15, 1)\n58 => List(69, 69, 6, 45, 95, 36, 34, 5, 30, 88, 93, 22, 32)\n44 => List(52, 17, 77, 98, 68, 61, 91, 13)\n88 => List(41, 28, 81, 95, 96)\n60 => List(53, 26, 7, 89)\n26 => List(34, 76, 35, 50, 55, 30, 51, 72, 28, 89, 68)\n68 => List(57, 7, 90, 57, 11, 55, 58, 62, 25, 58, 34, 84)\n2 => List(5, 49, 64, 48, 1, 53, 67, 48, 6, 65, 31, 15, 60, 79, 74)\n13 => List(79, 72, 58, 17, 45, 85, 45, 67, 36, 44, 27, 53)\n19 => List(26, 58, 6, 22, 74, 18)\n39 => List(28, 92, 87, 58, 4, 28, 11, 56, 5, 4, 50)\n81 => List(44, 6, 29, 82, 12, 69, 58, 91, 36)\n71 => List(96, 86, 42, 52, 86, 18, 60, 30, 19, 100)\n55 => List(51, 59, 100, 2, 44, 100, 65, 4, 83, 23, 61, 48, 92)\n29 => List(50, 48, 22, 44, 100, 79, 14, 64, 58)\n79 => List(58, 7, 92, 34, 48, 9, 84, 58, 7, 6, 65, 51, 50)\n65 => List(39, 86, 41, 18, 89, 90, 52, 61, 94, 93)\n11 => List(58, 44, 22, 69, 72, 27, 66, 78)\n35 => List(64, 99, 56, 22, 86, 37, 19, 80, 64, 57)\n57 => List(90, 17, 11, 50, 82, 80, 35, 60)\n51 => List(68, 50, 44, 77, 1, 58, 58, 14, 75, 85, 10, 96, 58, 6, 36, 87, 81, 69)\n37 => List(8, 60, 24, 40, 58, 49, 29)\n75 => List(30, 49, 93, 37, 95, 28, 61, 36, 25, 73)\n45 => List(47, 13, 52, 58, 100, 59, 34, 80, 22, 7, 56)\n1 => List(45, 19, 39, 60, 14, 1, 89, 82, 57)\n89 => List(10, 85, 91, 46, 19, 14, 53, 30, 51)\n63 => List(19, 68, 52, 1, 4, 61, 79, 15, 24, 59, 31, 46)\n83 => List(28, 7, 98, 31, 40, 83, 17, 13, 34, 30, 68, 1)\n17 => List(32, 47, 58, 25, 98, 62, 68, 4, 46, 28, 52, 44, 15)\n9 => List(38, 33, 95, 55, 66, 60, 15)\n49 => List(58, 10, 48, 37, 38, 34, 91, 67)\n43 => List(92, 46, 84, 68, 66, 26, 77, 24, 59, 58, 61, 70)\n99 => List(86, 55, 32, 62, 10, 37, 82, 73, 68, 96, 53, 1)\n41 => List(62, 91, 59, 16, 60, 31, 71, 11, 28, 36, 75, 77)\n61 => List(47, 75, 87, 23, 78, 41, 73, 96)\n15 => List(13, 24, 16, 4, 48, 44, 59, 39, 4, 57)\n21 => List(44, 46, 21, 28, 7, 44, 89, 38, 27, 69, 84, 64, 59)\n47 => List(4, 75, 50, 91, 79, 78, 82, 8, 2, 44, 16, 81, 44)\n77 => List(33, 18, 1, 29, 87, 4, 81, 49, 58, 25, 61)\n53 => List(42, 44, 59, 31, 33, 93, 72, 94, 38, 12, 47, 30, 58, 18, 68, 40, 85, 100, 100)\n97 => List(86, 80, 100, 54, 55, 1, 2, 24, 53, 91, 11, 44)\n25 => List(25, 16, 59, 15, 91, 29, 40, 100, 16, 45, 78, 9)\n95 => List(88, 42, 86, 90, 12, 54, 92, 98)\n59 => List(9, 61, 40, 11, 46, 8, 25, 92, 9)\n73 => List(76, 2, 73, 59, 29, 10, 62)\n27 => List(1, 84, 26, 70, 24, 24, 59)\n93 => List(80, 71, 23, 77, 38, 25, 23, 89, 72, 30, 59, 44)\n33 => List(28, 71, 60, 87, 17, 44, 41, 91, 7)\n23 => List(77, 8, 80, 6, 100, 56, 31, 77, 85, 57, 78, 98, 96)\n67 => List(46, 7, 44, 87, 58)\n69 => List(77, 15, 56, 37, 74, 68, 40)\n3 => List(57, 86, 30, 95, 28, 100, 79, 69, 65, 11, 6, 99, 26)\n7 => List(2, 75, 48, 93, 91, 45, 7, 31, 58, 64)\n85 => List(93, 81, 76, 84, 69, 93, 7, 22, 8)\n91 => List(18, 99, 8, 65, 58, 89, 88, 88, 64, 54, 30, 5, 12)\n31 => List(22, 40, 90, 66, 76, 53, 58, 1, 41, 70, 62, 76, 58, 82)\n87 => List(88, 4, 31, 69, 39, 85, 15, 14, 67, 37)\n5 => List(26, 84, 30, 50, 22, 84, 96, 24, 93, 18, 86)\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4041/jobs/job?id=25"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545747975222_-1277060497","id":"20161020-225722_1540411274","dateCreated":"2018-12-25T16:26:15+0200","dateStarted":"2018-12-25T16:35:28+0200","dateFinished":"2018-12-25T16:35:29+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10427"},{"user":"anonymous","dateUpdated":"2018-12-25T16:26:15+0200","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545747975223_1514415107","id":"20161018-203416_142363998","dateCreated":"2018-12-25T16:26:15+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10428"}],"name":"Lab 5.4 Solution - RDD Pair RDDs","id":"2DZVJ2UH1","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}