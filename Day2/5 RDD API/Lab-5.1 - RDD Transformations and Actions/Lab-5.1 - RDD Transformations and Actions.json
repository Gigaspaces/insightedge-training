{"paragraphs":[{"text":"%md\r\n## RDD Basics\r\n\r\nAn RDD in Spark is simply an immutable distributed collection of objects. Each RDD is split into multiple partitions, which may be computed on different nodes of the cluster.\r\n\r\nUsers create RDDs in two ways:\r\n\r\n* by loading an external dataset \r\n* by distributing a collection of objects (e.g., a list or set) in their driver program.\r\n\r\n\r\n\r\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"tableHide":false,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>RDD Basics</h2>\n<p>An RDD in Spark is simply an immutable distributed collection of objects. Each RDD is split into multiple partitions, which may be computed on different nodes of the cluster.</p>\n<p>Users create RDDs in two ways:</p>\n<ul>\n<li>by loading an external dataset</li>\n<li>by distributing a collection of objects (e.g., a list or set) in their driver program.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1521153003465_690518271","id":"20160822-102138_811007240","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10232"},{"title":"Example of loading RDD from an external dataset","text":"%spark\n\nval lines = spark.sparkContext.textFile(\"../../../data/README.md\")\n\nlines.take(5).foreach(println)\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003466_691672517","id":"20160822-103857_523919705","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10233"},{"title":"Example of loading RDD by parallelizing a collection","text":"%spark\n\nval lines = spark.sparkContext.parallelize(List(\"insightedge\", \"i like insightedge\", \"insightedge rocks\"))\n\nlines.collect.foreach(println)\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003467_691287768","id":"20160822-105959_2005037423","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10234"},{"text":"%md\n## RDD Transformation and Actions\n\nRDDs support two types of operations\n\n* Transformations \n* Actions\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"tableHide":false,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>RDD Transformation and Actions</h2>\n<p>RDDs support two types of operations</p>\n<ul>\n<li>Transformations</li>\n<li>Actions</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1521153003468_689364024","id":"20160822-110526_771394320","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10235"},{"title":"","text":"%md\n\n### **Transformations**\n\n*A transformation method of an RDD creates a new RDD by performing a computation on the source RDD.* \n\nRDD transformations are conceptually similar to Scala collection methods. Two important differences are as follows:\n\n- Scala collection methods operate on data that can fit in the memory of a single machine, whereas RDD methods can operate on data distributed across cluster of nodes. \n- RDD transformations are *lazy*, whereas Scala collection methods are *strict*.\n\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>Transformations</strong></h3>\n<p><em>A transformation method of an RDD creates a new RDD by performing a computation on the source RDD.</em></p>\n<p>RDD transformations are conceptually similar to Scala collection methods. Two important differences are as follows:</p>\n<ul>\n<li>Scala collection methods operate on data that can fit in the memory of a single machine, whereas RDD methods can operate on data distributed across cluster of nodes.</li>\n<li>RDD transformations are <em>lazy</em>, whereas Scala collection methods are <em>strict</em>.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1521153003469_688979275","id":"20160824-233321_1545252486","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10236"},{"text":"%md\n\n#### **filter**\n\nThe *filter* method is a higher-order method that takes a Boolean function as input and applies it to each element in the source RDD to create a new RDD. A Boolean function takes an input and returns true or false. The filter method returns a new RDD formed by selecting only those elements for which the input Boolean function returned true. Thus, the new RDD contains a subset of the elements in the original RDD.","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4><strong>filter</strong></h4>\n<p>The <em>filter</em> method is a higher-order method that takes a Boolean function as input and applies it to each element in the source RDD to create a new RDD. A Boolean function takes an input and returns true or false. The filter method returns a new RDD formed by selecting only those elements for which the input Boolean function returned true. Thus, the new RDD contains a subset of the elements in the original RDD.</p>\n"}]},"apps":[],"jobName":"paragraph_1521153003469_688979275","id":"20160824-233642_33725018","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10237"},{"title":"filter() example","text":"%spark\n\nval inputRDD = spark.sparkContext.textFile(\"../../../data/README.md\")\n\nval sparkRDD = inputRDD.filter(line => line.contains(\"spark\"))\n\nsparkRDD.collect.foreach(println)\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003470_690133522","id":"20160822-112742_796804883","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10238"},{"text":"%md\n\n### **map**\n\nThe *map* method is a higher-order method that takes a function as input and applies it to each element in the source RDD to create a new RDD. The input function to map must take a single input parameter and return a value.\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>map</strong></h3>\n<p>The <em>map</em> method is a higher-order method that takes a function as input and applies it to each element in the source RDD to create a new RDD. The input function to map must take a single input parameter and return a value.</p>\n"}]},"apps":[],"jobName":"paragraph_1521153003472_700136993","id":"20160824-233804_2111981647","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10239"},{"title":"map() example","text":"%spark\n\nval inputRDD = spark.sparkContext.textFile(\"../../../data/README.md\")\n\nval lcRDD = inputRDD.map { line => line.trim.toLowerCase() }\n\nlcRDD.take(10).foreach(println)\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003472_700136993","id":"20160822-113151_205163671","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10240"},{"text":"%md\n\n### **flatMap**\n\nThe *flatMap* method is a higher-order method that takes an input function, which returns a sequence for each input element passed to it. The flatMap method returns a new RDD formed by flattening this collection of sequence.\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>flatMap</strong></h3>\n<p>The <em>flatMap</em> method is a higher-order method that takes an input function, which returns a sequence for each input element passed to it. The flatMap method returns a new RDD formed by flattening this collection of sequence.</p>\n"}]},"apps":[],"jobName":"paragraph_1521153003473_699752244","id":"20160824-233849_561794074","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10241"},{"title":"flatMap() example","text":"%spark\n\nval lines = spark.sparkContext.textFile(\"../../../data/insightedge.txt\")\n\nval words = lines.flatMap { l => l.split(\" \") }\n\nwords.collect.foreach(println)\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003474_700906491","id":"20160824-233922_431674084","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10242"},{"text":"%md\n\n### **zip**\n\nThe *zip* method takes an RDD as input and returns an RDD of pairs, where the first element in a pair is from the source RDD and second element is from the input RDD. Unlike the cartesian method, the RDD returned by zip has the same number of elements as the source RDD. Both the source RDD and the input RDD must have the same length. In addition, both RDDs are assumed to have same number of partitions and same number of elements in each partition.","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>zip</strong></h3>\n<p>The <em>zip</em> method takes an RDD as input and returns an RDD of pairs, where the first element in a pair is from the source RDD and second element is from the input RDD. Unlike the cartesian method, the RDD returned by zip has the same number of elements as the source RDD. Both the source RDD and the input RDD must have the same length. In addition, both RDDs are assumed to have same number of partitions and same number of elements in each partition.</p>\n"}]},"apps":[],"jobName":"paragraph_1521153003474_700906491","id":"20160824-234712_2050007032","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10243"},{"title":"zip() example","text":"%spark\n\nval numbers = spark.sparkContext.parallelize(List(1, 2, 3, 4))\n\nval alphabets = spark.sparkContext.parallelize(List(\"a\", \"b\", \"c\", \"d\"))\n\nval zippedPairs = numbers.zip(alphabets)\n\nzippedPairs.collect.foreach(println)\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003474_700906491","id":"20160824-232917_935402122","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10244"},{"text":"%md\n\n### **zipWithIndex**\n\nThe *zipWithIndex* method zips the elements of the source RDD with their indices and returns an RDD of pairs.","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>zipWithIndex</strong></h3>\n<p>The <em>zipWithIndex</em> method zips the elements of the source RDD with their indices and returns an RDD of pairs.</p>\n"}]},"apps":[],"jobName":"paragraph_1521153003475_700521742","id":"20160824-235459_880644048","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10245"},{"title":"zipWithIndex() example","text":"%spark\n\nval alphabets = spark.sparkContext.parallelize(List(\"a\", \"b\", \"c\", \"d\"))\n\nval alphabetsWithIndex = alphabets.zipWithIndex\n\nalphabetsWithIndex.collect.foreach(println)\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003475_700521742","id":"20160824-235531_65637691","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10246"},{"text":"%md\n\n## **Actions**\n\n*Actions are RDD methods that return a value to a driver program.*","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2><strong>Actions</strong></h2>\n<p><em>Actions are RDD methods that return a value to a driver program.</em></p>\n"}]},"apps":[],"jobName":"paragraph_1521153003476_698597997","id":"20160825-000239_56061675","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10247"},{"text":"%md\n\n### **collect**\n\nThe *collect* method returns the elements in the source RDD as an array.\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>collect</strong></h3>\n<p>The <em>collect</em> method returns the elements in the source RDD as an array.</p>\n"}]},"apps":[],"jobName":"paragraph_1521153003476_698597997","id":"20160825-000713_1738668419","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10248"},{"title":"collect() action example","text":"%spark\n\nval rdd = spark.sparkContext.parallelize((1 to 10000).toList)\n\nval filteredRdd = rdd filter { x => (x % 1000) == 0 }\n\nval filterResult = filteredRdd.collect\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003476_698597997","id":"20160825-000853_584129715","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10249"},{"text":"%md\n\n### **count**\n\nThe *count* method returns a count of the elements in the source RDD.","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>count</strong></h3>\n<p>The <em>count</em> method returns a count of the elements in the source RDD.</p>\n"}]},"apps":[],"jobName":"paragraph_1521153003477_698213249","id":"20160825-000943_1916075260","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10250"},{"title":"count() action example","text":"%spark\n\nval xs = (1 to 100).toList\nval xsRdd = spark.sparkContext.parallelize(xs)\nval evenRdd = xsRdd.filter { _ % 2 == 0}\nval count = evenRdd.count\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003477_698213249","id":"20160822-113806_1236036492","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10251"},{"text":"%md\n\n### **first**\n\nThe *first* method returns the first element in the source RDD.","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>first</strong></h3>\n<p>The <em>first</em> method returns the first element in the source RDD.</p>\n"}]},"apps":[],"jobName":"paragraph_1521153003478_699367495","id":"20160825-001125_1832272884","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10252"},{"title":"first() action example","text":"%spark\n\nval xs = (1 to 100).toList\nval xsRdd = spark.sparkContext.parallelize(xs)\nval evenRdd = xsRdd.filter { _ % 2 == 0}\nval firstEven = evenRdd.first()\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003478_699367495","id":"20160822-114007_1394756535","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10253"},{"text":"%md\n\n### **take**\n\nThe *take* method takes an integer N as input and returns an array containing the first N element in the source RDD.","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>take</strong></h3>\n<p>The <em>take</em> method takes an integer N as input and returns an array containing the first N element in the source RDD.</p>\n"}]},"apps":[],"jobName":"paragraph_1521153003479_698982746","id":"20160825-001230_767406766","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10254"},{"title":"take() action example","text":"%spark\n\nval xs = (1 to 100).toList\nval xsRdd = spark.sparkContext.parallelize(xs)\nval evenRdd = xsRdd.filter { _ % 2 == 0}\nval first5 = evenRdd.take(5)\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003479_698982746","id":"20160822-114155_1726504292","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10255"},{"text":"%md\n\n### **fold**\n\nThe higher-order *fold* method aggregates the elements in the source RDD using the specified neutral zero value and an associative binary operator. It first aggregates the elements in each RDD partition and then aggregates the results from each partition.\nThe neutral zero value depends on the RDD type and the aggregation operation. For example, if we want to sum all the elements in an RDD of Integers, the neutral zero value should be 0. Instead, if we want to calculate the products of all the elements in an RDD of Integers, the neutral zero value should be 1.\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>fold</strong></h3>\n<p>The higher-order <em>fold</em> method aggregates the elements in the source RDD using the specified neutral zero value and an associative binary operator. It first aggregates the elements in each RDD partition and then aggregates the results from each partition.\n<br  />The neutral zero value depends on the RDD type and the aggregation operation. For example, if we want to sum all the elements in an RDD of Integers, the neutral zero value should be 0. Instead, if we want to calculate the products of all the elements in an RDD of Integers, the neutral zero value should be 1.</p>\n"}]},"apps":[],"jobName":"paragraph_1521153003480_697059002","id":"20160824-232851_2092442258","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10256"},{"title":"fold() action example","text":"%spark\n\nval numbersRdd = spark.sparkContext.parallelize(List(2, 5, 3, 1))\n\nval sum = numbersRdd.fold(0) ((s, x) => s + x)\n\nval product = numbersRdd.fold(1) ((p, x) => p * x)\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003480_697059002","id":"20160825-001657_1514729699","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10257"},{"text":"%md\n\n### **reduce**\n\nThe higher-order **_reduce_** method aggregates the elements of the source RDD using **an associative and commutative binary operator** provided to it. It is similar to the fold method; however, it does not require a neutral zero value.","dateUpdated":"2018-03-15T18:30:03-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>reduce</strong></h3>\n<p>The higher-order <strong><em>reduce</em></strong> method aggregates the elements of the source RDD using <strong>an associative and commutative binary operator</strong> provided to it. It is similar to the fold method; however, it does not require a neutral zero value.</p>\n"}]},"apps":[],"jobName":"paragraph_1521153003481_696674253","id":"20160825-001841_85058628","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10258"},{"text":"%spark\n\nval numbersRdd = spark.sparkContext.parallelize(List(2, 5, 3, 1))\n\nval sum = numbersRdd.reduce ((x, y) => x + y)\n\nval product = numbersRdd.reduce((x, y) => x * y)\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003481_696674253","id":"20160825-001933_1071665094","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10259"},{"title":"Scala Word Count in README.md file, Ten Most Common Words","text":"%spark\n\nval readmeFile = spark.sparkContext.textFile(\"../../../data/README.md\") \n\nval counts = readmeFile.flatMap(line => line.split(\" \")). map(word => (word, 1)). reduceByKey(_ + _) \n\nval sortedCounts = counts.sortBy(_._2, false) \n\nsortedCounts.take(10).foreach(println)\n","dateUpdated":"2018-03-15T18:30:03-0400","config":{"lineNumbers":false,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003481_696674253","id":"20160822-114941_856193120","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10260"},{"dateUpdated":"2018-03-15T18:30:03-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521153003482_697828500","id":"20160919-110818_1918993395","dateCreated":"2018-03-15T18:30:03-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10261"}],"name":"Lab 7.1 - RDD - Transformations and Actions","id":"2D9BJ5PUB","angularObjects":{"2DAKWKC7R:shared_process":[],"2DANBH7HM:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}