{"paragraphs":[{"title":"K-means","text":"%md\nsee http://spark.apache.org/docs/latest/mllib-clustering.html\nK-means is one of the most commonly used clustering algorithms that clusters the data points into a predefined number of clusters.\n\nparameters:\nk is the number of desired clusters\nmaxIterations is the maximum number of iterations to run.\ninitializationMode specifies either random initialization or initialization via k-means.\ninitializationSteps determines the number of steps in the k-means algorithm.\nepsilon determines the distance threshold within which we consider k-means to have converged.\ninitialModel is an optional set of cluster centers used for initialization. If this parameter is supplied, only one run is performed.","user":"anonymous","dateUpdated":"2018-12-27T10:57:52+0200","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>see <a href=\"http://spark.apache.org/docs/latest/mllib-clustering.html\">http://spark.apache.org/docs/latest/mllib-clustering.html</a><br/>K-means is one of the most commonly used clustering algorithms that clusters the data points into a predefined number of clusters.</p>\n<p>parameters:<br/>k is the number of desired clusters<br/>maxIterations is the maximum number of iterations to run.<br/>initializationMode specifies either random initialization or initialization via k-means.<br/>initializationSteps determines the number of steps in the k-means algorithm.<br/>epsilon determines the distance threshold within which we consider k-means to have converged.<br/>initialModel is an optional set of cluster centers used for initialization. If this parameter is supplied, only one run is performed.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1545901072373_460962462","id":"20181224-140936_2145395395","dateCreated":"2018-12-27T10:57:52+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4074"},{"title":"K-Means to create a model of spam/valid emails","text":"%spark\nimport org.apache.spark.ml.clustering._\nimport org.apache.spark.ml.feature._\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.insightedge.spark.implicits.all._\n\n\n\nfinal case class Email(id: BigInt, text: String)\n\n\nval emails = Seq(\n\"Dear Spark Learner, Thanks so much for attending the Spark Summit 2014!  Check out videos of talks from the summit at\",\n\"Hi Mom, Apologies for being late about emailing and forgetting to send you the package.  I hope you and bro have been\",\n\"Wow, hey Fred, just heard about the Spark petabyte sort.  I think we need to take time to try it out immediately\",\n\"Hi Spark user list, This is my first question to this list, so thanks in advance for your help!  I tried running\",\n\"Thanks Tom for your email.  I need to refer you to Alice for this one.  I haven't yet figured out that part either\",\n\"Hi Bob, Good job yesterday!  I was attending your talk, and really enjoyed it.  I want to try out GraphX\",\n\"Hi Bob, Summit demo got whoops from audience!  Had to let you know.  Regards Joe\",\n\"24 Hour Flash Sale: up to 50% off, order by 12/3 x Wine Country Gift Baskets info@message.winecountrygiftbaskets you will get money back\",\n\"Dear sir, I am a Prince in a far kingdom you have not heard of.  I want to send you money via wire transfer so please\",\n\"Get Viagra real cheap!  Send money right away to \",\n\"Oh my gosh you can be really strong too with these drugs found in the rainforest. Get them cheap right now\",\n\"YOUR COMPUTER HAS BEEN INFECTED!  YOU MUST RESET YOUR PASSWORD.  Reply to this email with your password and SSN\",\n\"THIS IS NOT A SCAM!  Send money and get access to awesome stuff really cheap and never have to \").zipWithIndex.map(_.swap).toDF(\"id\", \"text\").as[Email]\n\n// Prepare data for k-means\n// Pass emails through a \"pipeline\" of transformers\n\nval tok = new RegexTokenizer().setInputCol(\"text\").setOutputCol(\"tokens\").setPattern(\"\\\\W+\")\n\nval hashTF = new HashingTF().setInputCol(\"tokens\").setOutputCol(\"features\").setNumFeatures(100)\n\nval preprocess = (tok.transform _).andThen(hashTF.transform)\n\nval features = preprocess(emails.toDF)\n\nfeatures.select('text, 'features).show(false)\n\n//(max defult number of iterations is 10 )\nval kmeans = new KMeans().setK(2)\n\n//Todo\n//Train the KMeans model with the emails data (features) and save the model to the grid\n","user":"anonymous","dateUpdated":"2018-12-27T11:13:02+0200","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.clustering._\nimport org.apache.spark.ml.feature._\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.insightedge.spark.implicits.all._\nwarning: there was one unchecked warning; re-run with -unchecked for details\ndefined class Email\nemails: org.apache.spark.sql.Dataset[Email] = [id: int, text: string]\ntok: org.apache.spark.ml.feature.RegexTokenizer = regexTok_9d492b2c0f1e\nhashTF: org.apache.spark.ml.feature.HashingTF = hashingTF_c447ea9d5c0e\npreprocess: org.apache.spark.sql.Dataset[_] => org.apache.spark.sql.DataFrame = <function1>\nfeatures: org.apache.spark.sql.DataFrame = [id: int, text: string ... 2 more fields]\n+----------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n|text                                                                                                                                    |features                                                                                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n|Dear Spark Learner, Thanks so much for attending the Spark Summit 2014!  Check out videos of talks from the summit at                   |(100,[5,10,21,24,26,28,30,36,42,43,53,54,56,57,68,82],[2.0,3.0,1.0,1.0,3.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0])                                                  |\n|Hi Mom, Apologies for being late about emailing and forgetting to send you the package.  I hope you and bro have been                   |(100,[0,10,20,23,25,28,29,32,33,35,36,53,56,60,66,74,77,79,88,99],[1.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0])                      |\n|Wow, hey Fred, just heard about the Spark petabyte sort.  I think we need to take time to try it out immediately                        |(100,[5,7,10,16,20,29,37,38,48,54,55,57,59,64,70,71,77,88,93,95],[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0])                       |\n|Hi Spark user list, This is my first question to this list, so thanks in advance for your help!  I tried running                        |(100,[5,16,28,29,30,31,36,45,47,60,63,68,73,79,81,82,83,88],[1.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,2.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0])                                    |\n|Thanks Tom for your email.  I need to refer you to Alice for this one.  I haven't yet figured out that part either                      |(100,[25,29,30,36,37,40,44,48,54,56,60,61,63,64,72,73,77,88,92,95],[1.0,2.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0])                     |\n|Hi Bob, Good job yesterday!  I was attending your talk, and really enjoyed it.  I want to try out GraphX                                |(100,[10,12,25,29,33,34,41,53,54,59,60,63,68,70,88,89,95],[1.0,1.0,1.0,3.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0])                                          |\n|Hi Bob, Summit demo got whoops from audience!  Had to let you know.  Regards Joe                                                        |(100,[7,12,21,25,26,52,53,60,64,69,74,79,88,89],[1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0])                                                                |\n|24 Hour Flash Sale: up to 50% off, order by 12/3 x Wine Country Gift Baskets info@message.winecountrygiftbaskets you will get money back|(100,[10,11,13,18,20,23,25,27,28,30,39,42,53,58,59,70,71,80,81,88,94,95,97],[1.0,1.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0])|\n|Dear sir, I am a Prince in a far kingdom you have not heard of.  I want to send you money via wire transfer so please                   |(100,[12,13,18,23,25,26,29,41,42,43,45,57,61,64,66,68,70,73,86,88,90,95,99],[1.0,1.0,1.0,1.0,2.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0])|\n|Get Viagra real cheap!  Send money right away to                                                                                        |(100,[23,27,37,42,59,66,74,88,91],[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0])                                                                                                  |\n|Oh my gosh you can be really strong too with these drugs found in the rainforest. Get them cheap right now                              |(100,[10,12,16,24,25,29,33,44,45,50,55,56,59,61,66,74,92,98],[2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0])                                   |\n|YOUR COMPUTER HAS BEEN INFECTED!  YOU MUST RESET YOUR PASSWORD.  Reply to this email with your password and SSN                         |(100,[11,17,23,25,33,35,50,51,56,63,73,80,88,92,95],[2.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,3.0,1.0,1.0,1.0,1.0,1.0])                                                        |\n|THIS IS NOT A SCAM!  Send money and get access to awesome stuff really cheap and never have to                                          |(100,[10,18,23,24,25,26,33,42,59,66,70,73,74,81,88,99],[1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0])                                                 |\n+----------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\r\nkmeans: org.apache.spark.ml.clustering.KMeans = kmeans_790d663686da\nkmModel: org.apache.spark.ml.clustering.KMeansModel = kmeans_790d663686da\nres96: Array[org.apache.spark.ml.linalg.SparseVector] = Array((100,[5,7,10,11,12,13,16,18,20,21,23,24,25,26,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,48,53,54,55,56,57,58,59,60,61,63,64,66,68,70,71,72,73,74,77,80,81,82,86,88,89,90,91,92,93,94,95,97,99],[0.375,0.125,0.875,0.125,0.25,0.25,0.125,0.5,0.25,0.125,0.5,0.25,0.75,0.625,0.25,0.25,1.0,0.375,0.375,0.125,0.375,0.375,0.125,0.125,0.125,0.25,0.625,0.25,0.125,0.125,0.25,0.375,0.5,0.125,0.25,0.5,0.125,0.75,0.25,0.375,0.25,0.375,0.375,0.375,0.75,0.25,0.125,0.375,0.25,0.25,0.125,0.25,0.125,0.125,1.375,0.125,0.125,0.125,0.125,0.125,0.125,0.625,0.25,0.25]), (100,[0,5,7,10,11,12,16,17,20,21,23,24,25,26,28,29,30,31,32,33,35,36,44,45,47,50,51,52,53,55,56,59,60,61,63,64,66,68,69,73,74,77,79,80,81,82,83,88,89,92,95,98,99],[0.2,0.2,0.2,0.600...email: org.apache.spark.sql.DataFrame = [text: string]\n+---------+------------+-----------------------+----------+\n|text     |tokens      |features               |prediction|\n+---------+------------+-----------------------+----------+\n|hello mom|[hello, mom]|(100,[48,56],[1.0,1.0])|1         |\n+---------+------------+-----------------------+----------+\n\r\nresult: Unit = ()\nsavedModel: org.apache.spark.ml.clustering.KMeansModel = kmeans_790d663686da\n"}]},"apps":[],"jobName":"paragraph_1545901072375_-1363599811","id":"20181224-141330_991230917","dateCreated":"2018-12-27T10:57:52+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4075"},{"title":"Logistic regression","text":"%md\nsee http://spark.apache.org/docs/latest/ml-classification-regression.html\nLogistic regression is a popular method to predict a categorical response. It is a special case of Generalized Linear models that predicts the probability of the outcomes. In spark.ml logistic regression can be used to predict a binary outcome by using binomial logistic regression, or it can be used to predict a multiclass outcome by using multinomial logistic regression.","user":"anonymous","dateUpdated":"2018-12-27T10:57:52+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>see <a href=\"http://spark.apache.org/docs/latest/ml-classification-regression.html\">http://spark.apache.org/docs/latest/ml-classification-regression.html</a><br/>Logistic regression is a popular method to predict a categorical response. It is a special case of Generalized Linear models that predicts the probability of the outcomes. In spark.ml logistic regression can be used to predict a binary outcome by using binomial logistic regression, or it can be used to predict a multiclass outcome by using multinomial logistic regression.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1545901072377_-1311365361","id":"20181224-083519_149685599","dateCreated":"2018-12-27T10:57:52+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4076"},{"title":"Binomial logistic regression - to model spam and valid emails","text":"%spark\r\n\r\nimport org.apache.spark.mllib.classification.LogisticRegressionWithSGD\r\nimport org.insightedge.spark.implicits.all._\r\nimport org.apache.spark.mllib.feature._\r\nimport org.apache.spark.mllib.regression.LabeledPoint\r\n\r\n\r\n    // toDo\r\n    // Load 2 types of emails from text files: spam and validmail spam.txt validmail.txt\r\n    // Each line has text from one email.\r\n    // In this case we split the emails Seq from previous example to two groups one that we know to be spam and another with is valid\r\n    \r\n\r\n    // Create a HashingTF instance to map email text to vectors of 100 features.\r\n    val tf = new HashingTF(numFeatures = 100)\r\n    // Each email is split into words, and each word is mapped to one feature.\r\n    val spamFeatures = spam.map(email => tf.transform(email.split(\" \")))\r\n    val hamFeatures = ham.map(email => tf.transform(email.split(\" \")))\r\n\r\n    // Create LabeledPoint datasets for spam labled 1 and valid labled 0 examples.\r\n    val positiveExamples = spamFeatures.map(features => LabeledPoint(1, features))\r\n    val negativeExamples = hamFeatures.map(features => LabeledPoint(0, features))\r\n    val trainingData = positiveExamples ++ negativeExamples\r\n    trainingData.cache() // Cache data since Logistic Regression is an iterative algorithm.\r\n    \r\n    //ToDo use LogisticRegressionWithSGD to train the model and save the model to the grid\r\n\r\n    \r\n    \r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n","user":"anonymous","dateUpdated":"2018-12-27T11:20:46+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.mllib.classification.LogisticRegressionWithSGD\nimport org.insightedge.spark.implicits.all._\nimport org.apache.spark.mllib.feature._\nimport org.apache.spark.mllib.regression.LabeledPoint\nspam: org.apache.spark.rdd.RDD[String] = C:/train/data/spam.txt MapPartitionsRDD[29] at textFile at <console>:47\nham: org.apache.spark.rdd.RDD[String] = C:/train/data/validmail.txt MapPartitionsRDD[31] at textFile at <console>:43\ntf: org.apache.spark.mllib.feature.HashingTF = org.apache.spark.mllib.feature.HashingTF@cc203c0\nspamFeatures: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[32] at map at <console>:51\nhamFeatures: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[33] at map at <console>:49\npositiveExamples: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[34] at map at <console>:65\nnegativeExamples: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[35] at map at <console>:63\ntrainingData: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = UnionRDD[36] at $plus$plus at <console>:71\nres16: trainingData.type = UnionRDD[36] at $plus$plus at <console>:71\nwarning: there was one deprecation warning; re-run with -deprecation for details\nlrLearner: org.apache.spark.mllib.classification.LogisticRegressionWithSGD = org.apache.spark.mllib.classification.LogisticRegressionWithSGD@236505b3\nmodel: org.apache.spark.mllib.classification.LogisticRegressionModel = org.apache.spark.mllib.classification.LogisticRegressionModel: intercept = 0.0, numFeatures = 100, numClasses = 2, threshold = 0.5\n"}]},"apps":[],"jobName":"paragraph_1545901072378_-1875249038","id":"20181223-142523_699602601","dateCreated":"2018-12-27T10:57:52+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4077"},{"title":"Load models from space , predict if email is spam based on the 2 modeles","text":"%spark\nimport org.apache.spark.ml.clustering.KMeansModel\nimport org.apache.spark.mllib.classification.LogisticRegressionModel\nimport org.apache.spark.ml.clustering._\nimport org.apache.spark.ml.feature._\n\n//ToDo Load from the space the 2 modeles\nval spamTest = \"O M G GET cheap stuff by sending money to \"\nval validTest = \"Hi Dad, I started studying Spark and I had to tell you \"\n\n//ToDo\n//Predict reslts with both models for the test texts.\n","user":"anonymous","dateUpdated":"2018-12-27T11:22:45+0200","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.clustering.KMeansModel\nimport org.apache.spark.mllib.classification.LogisticRegressionModel\nimport org.apache.spark.ml.clustering._\nimport org.apache.spark.ml.feature._\nemailsKModel: org.apache.spark.ml.clustering.KMeansModel = kmeans_18bf0bd28885\nemailsLRModel: org.apache.spark.mllib.classification.LogisticRegressionModel = org.apache.spark.mllib.classification.LogisticRegressionModel: intercept = 0.0, numFeatures = 100, numClasses = 2, threshold = 0.5\nspamTest: String = \"O M G GET cheap stuff by sending money to \"\nvalidTest: String = \"Hi Dad, I started studying Spark and I had to tell you \"\nspamPredict: Double = 1.0\nvalidPredict: Double = 0.0\ntok: org.apache.spark.ml.feature.RegexTokenizer = regexTok_707875d8c746\nhashTF: org.apache.spark.ml.feature.HashingTF = hashingTF_4f81e7a08d27\npreprocess: org.apache.spark.sql.Dataset[_] => org.apache.spark.sql.DataFrame = <function1>\nspamTest4KMeans: org.apache.spark.sql.DataFrame = [text: string, tokens: array<string> ... 1 more field]\nvalidTest4KMeans: org.apache.spark.sql.DataFrame = [text: string, tokens: array<string> ... 1 more field]\n+----------+\n|prediction|\n+----------+\n|         0|\n+----------+\n\r\nspamresult: Unit = ()\n+----------+\n|prediction|\n+----------+\n|         1|\n+----------+\n\r\nvalidesult: Unit = ()\n"}]},"apps":[],"jobName":"paragraph_1545901072380_939150986","id":"20181224-085220_158226380","dateCreated":"2018-12-27T10:57:52+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4078"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2018-12-27T10:57:52+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545901072381_-654036200","id":"20181227-095840_1273757614","dateCreated":"2018-12-27T10:57:52+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4079"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2018-12-27T10:57:52+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545901072382_1320925903","id":"20181226-145302_573528127","dateCreated":"2018-12-27T10:57:52+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4080"},{"title":"Multiclass classification","text":"%md\nMulticlass classification is supported via multinomial logistic (softmax) regression. In multinomial logistic regression, the algorithm produces K sets of coefficients, or a matrix of dimension K×J where K is the number of outcome classes and J is the number of features. If the algorithm is fit with an intercept term then a length K vector of intercepts is available.\n\nMultinomial coefficients are available as coefficientMatrix and intercepts are available as interceptVector.\n\nThe conditional probabilities of the outcome classes k∈1,2,…,K are modeled using the softmax function.\n\nP(Y=k|X,βk,β0k)=eβk⋅X+β0k∑K−1k′=0eβk′⋅X+β0k′\n\nWe minimize the weighted negative log-likelihood, using a multinomial response model, with elastic-net penalty to control for overfitting.\n\nminβ,β0−[∑i=1Lwi⋅logP(Y=yi|xi)]+λ[12(1−α)||β||22+α||β||1]\n","user":"anonymous","dateUpdated":"2018-12-27T10:57:52+0200","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Multiclass classification is supported via multinomial logistic (softmax) regression. In multinomial logistic regression, the algorithm produces K sets of coefficients, or a matrix of dimension K×J where K is the number of outcome classes and J is the number of features. If the algorithm is fit with an intercept term then a length K vector of intercepts is available.</p>\n<p>Multinomial coefficients are available as coefficientMatrix and intercepts are available as interceptVector.</p>\n<p>The conditional probabilities of the outcome classes k∈1,2,…,K are modeled using the softmax function.</p>\n<p>P(Y=k|X,βk,β0k)=eβk⋅X+β0k∑K−1k′=0eβk′⋅X+β0k′</p>\n<p>We minimize the weighted negative log-likelihood, using a multinomial response model, with elastic-net penalty to control for overfitting.</p>\n<p>minβ,β0−[∑i=1Lwi⋅logP(Y=yi|xi)]+λ[12(1−α)||β||22+α||β||1]</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1545901072382_-1494173886","id":"20181224-085216_1553489958","dateCreated":"2018-12-27T10:57:52+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4081"},{"title":"Multinomial logistic regression","text":"%spark\nimport org.apache.spark.ml.classification.LogisticRegression\n\n// Load training data\nval training = spark.read.format(\"libsvm\").load(\"C:/train/data/sample_multiclass_classification_data.txt\")\n\nval lr = new LogisticRegression().setMaxIter(10).setRegParam(0.3).setElasticNetParam(0.8)\n\n// Fit the model\nval lrModel = lr.fit(training)\n\n// Print the coefficients and intercept for multinomial logistic regression\nprintln(s\"Coefficients: \\n${lrModel.coefficientMatrix}\")\nprintln(s\"Intercepts: \\n${lrModel.interceptVector}\")\n\nval trainingSummary = lrModel.summary\n\n// Obtain the objective per iteration\nval objectiveHistory = trainingSummary.objectiveHistory\nprintln(\"objectiveHistory:\")\nobjectiveHistory.foreach(println)\n\n// for multiclass, we can inspect metrics on a per-label basis\nprintln(\"False positive rate by label:\")\ntrainingSummary.falsePositiveRateByLabel.zipWithIndex.foreach { case (rate, label) =>\n  println(s\"label $label: $rate\")\n}\n\nprintln(\"True positive rate by label:\")\ntrainingSummary.truePositiveRateByLabel.zipWithIndex.foreach { case (rate, label) =>\n  println(s\"label $label: $rate\")\n}\n\nprintln(\"Precision by label:\")\ntrainingSummary.precisionByLabel.zipWithIndex.foreach { case (prec, label) =>\n  println(s\"label $label: $prec\")\n}\n\nprintln(\"Recall by label:\")\ntrainingSummary.recallByLabel.zipWithIndex.foreach { case (rec, label) =>\n  println(s\"label $label: $rec\")\n}\n\n\nprintln(\"F-measure by label:\")\ntrainingSummary.fMeasureByLabel.zipWithIndex.foreach { case (f, label) =>\n  println(s\"label $label: $f\")\n}\n\nval accuracy = trainingSummary.accuracy\nval falsePositiveRate = trainingSummary.weightedFalsePositiveRate\nval truePositiveRate = trainingSummary.weightedTruePositiveRate\nval fMeasure = trainingSummary.weightedFMeasure\nval precision = trainingSummary.weightedPrecision\nval recall = trainingSummary.weightedRecall\nprintln(s\"Accuracy: $accuracy\\nFPR: $falsePositiveRate\\nTPR: $truePositiveRate\\n\" +\n  s\"F-measure: $fMeasure\\nPrecision: $precision\\nRecall: $recall\")\n  \n//Save the model to the grid  \nlrModel.saveToGrid(sc, \"LRModel2\")\n  \n","user":"anonymous","dateUpdated":"2018-12-27T10:57:52+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.classification.LogisticRegression\ntraining: org.apache.spark.sql.DataFrame = [label: double, features: vector]\nlr: org.apache.spark.ml.classification.LogisticRegression = logreg_c62727fc3c95\nlrModel: org.apache.spark.ml.classification.LogisticRegressionModel = logreg_c62727fc3c95\nCoefficients: \n3 x 4 CSCMatrix\n(1,2) -0.7803943459681859\n(0,3) 0.3176483191238039\n(1,3) -0.3769611423403096\r\nIntercepts: \n[0.05165231659832854,-0.12391224990853622,0.07225993331020768]\r\ntrainingSummary: org.apache.spark.ml.classification.LogisticRegressionTrainingSummary = org.apache.spark.ml.classification.LogisticRegressionTrainingSummaryImpl@4f28d914\nobjectiveHistory: Array[Double] = Array(1.098612288668108, 1.087602085441699, 1.0341156572156232, 1.0289859520256006, 1.0300389657358995, 1.0239965158223991, 1.0236097451839508, 1.0231082121970012, 1.023022220302788, 1.0230018151780262, 1.0229963739557606)\nobjectiveHistory:\r\n1.098612288668108\r\n1.087602085441699\r\n1.0341156572156232\r\n1.0289859520256006\r\n1.0300389657358995\r\n1.0239965158223991\r\n1.0236097451839508\r\n1.0231082121970012\r\n1.023022220302788\r\n1.0230018151780262\r\n1.0229963739557606\r\nFalse positive rate by label:\r\nlabel 0: 0.22\r\nlabel 1: 0.05\r\nlabel 2: 0.0\r\nTrue positive rate by label:\r\nlabel 0: 1.0\r\nlabel 1: 1.0\r\nlabel 2: 0.46\r\nPrecision by label:\r\nlabel 0: 0.6944444444444444\r\nlabel 1: 0.9090909090909091\r\nlabel 2: 1.0\r\nRecall by label:\r\nlabel 0: 1.0\r\nlabel 1: 1.0\r\nlabel 2: 0.46\r\nF-measure by label:\r\nlabel 0: 0.819672131147541\r\nlabel 1: 0.9523809523809523\r\nlabel 2: 0.6301369863013699\r\naccuracy: Double = 0.82\nfalsePositiveRate: Double = 0.09\ntruePositiveRate: Double = 0.82\nfMeasure: Double = 0.8007300232766211\nprecision: Double = 0.8678451178451179\nrecall: Double = 0.82\nAccuracy: 0.82\nFPR: 0.09\nTPR: 0.82\nF-measure: 0.8007300232766211\nPrecision: 0.8678451178451179\nRecall: 0.82\r\n"}]},"apps":[],"jobName":"paragraph_1545901072383_1619079283","id":"20181224-083956_1363389928","dateCreated":"2018-12-27T10:57:52+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4082"},{"user":"anonymous","dateUpdated":"2018-12-27T10:57:52+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545901072384_625080397","id":"20181223-142531_1393874199","dateCreated":"2018-12-27T10:57:52+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4083"}],"name":"Exercise - Machine learning 1","id":"2DY2TJNN5","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"insightedge_jdbc:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}