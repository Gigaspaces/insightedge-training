{
  "paragraphs": [
    {
      "text": "%md\n\n## Initialize the stream\n\n",
      "user": "anonymous",
      "dateUpdated": "2019-05-01T14:12:00+0300",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Initialize the stream</h2>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1556709120616_-433062727",
      "id": "20180310-232008_2084436888",
      "dateCreated": "2019-05-01T14:12:00+0300",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:53029"
    },
    {
      "text": "%spark\n\nimport org.apache.spark.sql.types._\n\n\nval inputPath = \"../../../../Data/othello/\"\n\nval streamingInput = spark.readStream.option(\"maxFilesPerTrigger\", 1).text(inputPath).as[String]\n\nval streamingCounts = streamingInput.flatMap(line => line.split(\"\\\\s+\")).groupByKey(_.toLowerCase).count\n    \nval isSteraming = streamingCounts.isStreaming    \n\n   ",
      "user": "anonymous",
      "dateUpdated": "2019-05-01T14:12:00+0300",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": false,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1556709120620_-1160056347",
      "id": "20180310-232058_1854265386",
      "dateCreated": "2019-05-01T14:12:00+0300",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:53030"
    },
    {
      "text": "%md\n\n## Start streaming Computions\n\nAs you can see, streamingCounts is a streaming DataSet (streamingCounts.isStreaming was true). You can start streaming computation, by defining the sink and starting it. In our case, we want to interactively query the counts ( so we will set the complete set to be a in a in-memory table (note that this for testing purpose only)\n",
      "user": "anonymous",
      "dateUpdated": "2019-05-01T14:12:00+0300",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Start streaming Computions</h2>\n<p>As you can see, streamingCounts is a streaming DataSet (streamingCounts.isStreaming was true). You can start streaming computation, by defining the sink and starting it. In our case, we want to interactively query the counts ( so we will set the complete set to be a in a in-memory table (note that this for testing purpose only)</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1556709120620_-903270664",
      "id": "20180310-233015_1064163149",
      "dateCreated": "2019-05-01T14:12:00+0300",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:53031"
    },
    {
      "text": "import org.apache.spark.sql.streaming._\nspark.conf.set(\"spark.sql.shuffle.partitions\", \"1\")  // keep the size of shuffles small\n\nval query1 =  streamingCounts.writeStream.format(\"memory\").queryName(\"countTable\").trigger(Trigger.ProcessingTime(\"5 seconds\")).outputMode(OutputMode.Complete).start()\n  // memory = store in-memory table (for testing only)  \n  // countTable = name of the in-memory table\n  // complete = all the counts should be in the table\n  // Triggrer 5 seconds delay   \n",
      "user": "anonymous",
      "dateUpdated": "2019-05-01T14:13:01+0300",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1556709120621_-1574837236",
      "id": "20180310-232850_120441597",
      "dateCreated": "2019-05-01T14:12:00+0300",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:53032"
    },
    {
      "text": "%md\n\n## See Streaming in action\n\nquery is a handle to the streaming,This query is continuously picking up files and updating the counts.\nWe set a trigger of 5 seconds, so you can run the next pargraph several times to see the progress\n\n",
      "user": "anonymous",
      "dateUpdated": "2019-05-01T14:12:00+0300",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>See Streaming in action</h2>\n<p>query is a handle to the streaming,This query is continuously picking up files and updating the counts.<br/>We set a trigger of 5 seconds, so you can run the next pargraph several times to see the progress</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1556709120621_-1113511059",
      "id": "20160822-165125_1131574017",
      "dateCreated": "2019-05-01T14:12:00+0300",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:53033"
    },
    {
      "title": "Counts per word",
      "text": "%sql\nselect * from countTable2 ",
      "user": "anonymous",
      "dateUpdated": "2019-05-01T14:12:00+0300",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "fontSize": 9,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "value": "string",
                      "count(1)": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "value",
                  "index": 0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "count(1)",
                  "index": 1,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1556709120621_-1479917053",
      "id": "20160823-111517_1662906000",
      "dateCreated": "2019-05-01T14:12:00+0300",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:53034"
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2019-05-01T14:12:00+0300",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1556709120622_1961752434",
      "id": "20160825-005916_631693256",
      "dateCreated": "2019-05-01T14:12:00+0300",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:53035"
    }
  ],
  "name": "Lab 10.1 Solution - Structured Streaming",
  "id": "2EAHBZW63",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}