{"paragraphs":[{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class Flight(\n   @BeanProperty\n   @SpaceId\n   var uId: String,\n   \n   @BeanProperty\n   var dofM: String,\n   \n   @BeanProperty\n   var dofW: String,\n   \n   @BeanProperty\n   var carrier: String,\n   \n   @BeanProperty\n   var tailnum: String,\n   \n   @BeanProperty\n   var flnum: Int,\n   \n   @BeanProperty\n   var org_id: Long,\n   \n   @BeanProperty\n   var origin: String,\n   \n   @BeanProperty\n   var dest_id: Long,\n   \n   @BeanProperty\n   var dest: String,\n   \n   @BeanProperty\n   var crsdeptime: Double,\n   \n   @BeanProperty\n   var deptime: Double,\n   \n   @BeanProperty\n   var depdelaymins: Double,\n   \n   @BeanProperty\n   var crsarrtime: Double,\n   \n   @BeanProperty\n   var arrtime: Double,\n   \n   @BeanProperty\n   var arrdelay: Double,\n   \n   @BeanProperty\n   var crselapsedtime: Double,\n   \n   @BeanProperty\n   var dist: Int\n) {\n   def this() = this(null, null, null, null, null, -1, \n    -1, null, -1, null, \n    -1.0, -1.0, -1.0, -1.0, \n    -1.0, -1.0, -1.0, -1)\n}\n\n/*\ncase class Flight(dofM: String, dofW: String, carrier: String, tailnum: String, flnum: Int //5\n, org_id: Long, origin: String, dest_id: Long, dest: String, //4\ncrsdeptime: Double, deptime: Double, depdelaymins: Double, crsarrtime: Double   //4\n, arrtime: Double, arrdelay: Double, crselapsedtime: Double, dist: Int) //4\n*/","user":"anonymous","dateUpdated":"2019-01-01T13:03:38+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res5: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@740114bc\n"}]},"apps":[],"jobName":"paragraph_1546336485309_777927137","id":"20170501-154625_634252379","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-01T13:03:38+0200","dateFinished":"2019-01-01T13:03:39+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12125"},{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class AirportOrigin(\n   @BeanProperty\n   @SpaceId\n   var org_id: Long,\n   \n   @BeanProperty\n   var origin: String\n) {\n   def this() = this(-1, null)\n}","user":"anonymous","dateUpdated":"2019-01-01T13:00:44+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@6a4b9629\n"}]},"apps":[],"jobName":"paragraph_1546336485312_-1270366284","id":"20170502-115943_1344011911","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-01T13:00:44+0200","dateFinished":"2019-01-01T13:01:00+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12126"},{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class Airport(\n   @BeanProperty\n   @SpaceId\n   var org_id: Long,\n   \n   @BeanProperty\n   var origin_name: String\n) {\n   def this() = this(-1, null)\n}","user":"anonymous","dateUpdated":"2019-01-01T13:03:02+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@2a74320f\n"}]},"apps":[],"jobName":"paragraph_1546336485314_-1408077438","id":"20170502-134621_1036790234","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-01T13:03:02+0200","dateFinished":"2019-01-01T13:03:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12127"},{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class InCommingConnection(\n   @BeanProperty\n   @SpaceId\n   var org_id: Long,\n   \n   @BeanProperty\n   var origin_name: String,\n   \n   @BeanProperty\n   var number_of_connections: Int\n) {\n   def this() = this(-1, null, -1)\n}","user":"anonymous","dateUpdated":"2019-01-01T13:03:08+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res2: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@27590808\n"}]},"apps":[],"jobName":"paragraph_1546336485316_394552860","id":"20170503-102535_1690738828","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-01T13:03:08+0200","dateFinished":"2019-01-01T13:03:09+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12128"},{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class OutGoingConnection(\n   @BeanProperty\n   @SpaceId\n   var org_id: Long,\n   \n   @BeanProperty\n   var origin_name: String,\n   \n   @BeanProperty\n   var number_of_connections: Int\n) {\n   def this() = this(-1, null, -1)\n}","user":"anonymous","dateUpdated":"2019-01-01T13:03:14+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res3: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@6f952f44\n"}]},"apps":[],"jobName":"paragraph_1546336485318_144492675","id":"20170503-103201_1524524541","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-01T13:03:14+0200","dateFinished":"2019-01-01T13:03:16+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12129"},{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class Route(\n   @BeanProperty\n   @SpaceId\n   var orig_dest: String,\n   \n   @BeanProperty\n   var origin: Long,\n   \n   @BeanProperty\n   var origin_name: String,\n   \n   @BeanProperty\n   var destination: Long,\n   \n   @BeanProperty\n   var destination_name: String,\n   \n   @BeanProperty\n   var distance: Int\n) {\n   def this() = this(null, -1, null, -1, null, -1)\n}","user":"anonymous","dateUpdated":"2019-01-01T13:03:21+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res4: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@1e56171c\n"}]},"apps":[],"jobName":"paragraph_1546336485320_1614997192","id":"20170502-130046_853166516","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-01T13:03:21+0200","dateFinished":"2019-01-01T13:03:22+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12130"},{"text":"\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.util.IntParam\nimport org.apache.spark.sql.SQLContext\nimport org.apache.spark.graphx._\nimport org.apache.spark.graphx.util.GraphGenerators\nimport org.apache.spark.util.StatCounter\n\n\n  def parseFlight(str: String): Flight = {\n    val line = str.split(\",\")\n    Flight(line(0)+line(4), line(0), line(1), line(2), line(3), line(4).toInt, line(5).toLong, \n           line(6), line(7).toLong, line(8), line(9).toDouble, line(10).toDouble, \n           line(11).toDouble, line(12).toDouble, line(13).toDouble, line(14).toDouble, line(15).toDouble, line(16).toInt)\n  }\n  //Create RDD with the January 2014 data \n  val textRDD = sc.textFile(\"../../../../data/rita2014jan.csv\")\n\n  val flightsRDD = textRDD.map(parseFlight).cache()\n  flightsRDD.take(1)\n","user":"anonymous","dateUpdated":"2019-01-01T13:28:57+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"import org.apache.spark.rdd.RDD\nimport org.apache.spark.util.IntParam\nimport org.apache.spark.sql.SQLContext\nimport org.apache.spark.graphx._\nimport org.apache.spark.graphx.util.GraphGenerators\nimport org.apache.spark.util.StatCounter\nparseFlight: (str: String)Flight\ntextRDD: org.apache.spark.rdd.RDD[String] = ../../../../data/230739429_102018_266_airline_delay_causes.csv MapPartitionsRDD[4] at textFile at <console>:44\nflightsRDD: org.apache.spark.rdd.RDD[Flight] = MapPartitionsRDD[5] at map at <console>:45\norg.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 0.0 failed 1 times, most recent failure: Lost task 0.0 in stage 0.0 (TID 0, localhost, executor driver): java.lang.NumberFormatException: For input string: \"\"airport\"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Integer.parseInt(Integer.java:569)\n\tat java.lang.Integer.parseInt(Integer.java:615)\n\tat scala.collection.immutable.StringLike$class.toInt(StringLike.scala:272)\n\tat scala.collection.immutable.StringOps.toInt(StringOps.scala:29)\n\tat parseFlight(<console>:42)\n\tat $anonfun$1.apply(<console>:45)\n\tat $anonfun$1.apply(<console>:45)\n\tat scala.collection.Iterator$$anon$11.next(Iterator.scala:409)\n\tat org.apache.spark.storage.memory.MemoryStore.putIteratorAsValues(MemoryStore.scala:217)\n\tat org.apache.spark.storage.BlockManager$$anonfun$doPutIterator$1.apply(BlockManager.scala:1094)\n\tat org.apache.spark.storage.BlockManager$$anonfun$doPutIterator$1.apply(BlockManager.scala:1085)\n\tat org.apache.spark.storage.BlockManager.doPut(BlockManager.scala:1020)\n\tat org.apache.spark.storage.BlockManager.doPutIterator(BlockManager.scala:1085)\n\tat org.apache.spark.storage.BlockManager.getOrElseUpdate(BlockManager.scala:811)\n\tat org.apache.spark.rdd.RDD.getOrCompute(RDD.scala:335)\n\tat org.apache.spark.rdd.RDD.iterator(RDD.scala:286)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:109)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:345)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\nDriver stacktrace:\n  at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1651)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1639)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1638)\n  at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n  at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)\n  at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1638)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:831)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:831)\n  at scala.Option.foreach(Option.scala:257)\n  at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:831)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1872)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1821)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1810)\n  at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n  at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:642)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:2034)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:2055)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:2074)\n  at org.apache.spark.rdd.RDD$$anonfun$take$1.apply(RDD.scala:1364)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n  at org.apache.spark.rdd.RDD.withScope(RDD.scala:363)\n  at org.apache.spark.rdd.RDD.take(RDD.scala:1337)\n  ... 56 elided\nCaused by: java.lang.NumberFormatException: For input string: \"\"airport\"\"\n  at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n  at java.lang.Integer.parseInt(Integer.java:569)\n  at java.lang.Integer.parseInt(Integer.java:615)\n  at scala.collection.immutable.StringLike$class.toInt(StringLike.scala:272)\n  at scala.collection.immutable.StringOps.toInt(StringOps.scala:29)\n  at parseFlight(<console>:42)\n  at $anonfun$1.apply(<console>:45)\n  at $anonfun$1.apply(<console>:45)\n  at scala.collection.Iterator$$anon$11.next(Iterator.scala:409)\n  at org.apache.spark.storage.memory.MemoryStore.putIteratorAsValues(MemoryStore.scala:217)\n  at org.apache.spark.storage.BlockManager$$anonfun$doPutIterator$1.apply(BlockManager.scala:1094)\n  at org.apache.spark.storage.BlockManager$$anonfun$doPutIterator$1.apply(BlockManager.scala:1085)\n  at org.apache.spark.storage.BlockManager.doPut(BlockManager.scala:1020)\n  at org.apache.spark.storage.BlockManager.doPutIterator(BlockManager.scala:1085)\n  at org.apache.spark.storage.BlockManager.getOrElseUpdate(BlockManager.scala:811)\n  at org.apache.spark.rdd.RDD.getOrCompute(RDD.scala:335)\n  at org.apache.spark.rdd.RDD.iterator(RDD.scala:286)\n  at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)\n  at org.apache.spark.scheduler.Task.run(Task.scala:109)\n  at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:345)\n  ... 3 more\n"}]},"apps":[],"jobName":"paragraph_1546336485321_922199331","id":"20170501-154608_848853042","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-01T13:28:24+0200","dateFinished":"2019-01-01T13:28:28+0200","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:12131","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4040/jobs/job?id=0"],"interpreterSettingId":"spark"}}},{"text":"%spark\n\n  val airports = flightsRDD.map(flight => (flight.org_id, flight.origin)).distinct\n  airports.take(1)\n  val airportOriginsRDD = airports.map(airport => AirportOrigin(airport._1, airport._2))","user":"anonymous","dateUpdated":"2019-01-01T11:54:45+0200","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1546336485324_329590378","id":"20170502-121536_250286007","dateCreated":"2019-01-01T11:54:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12132"},{"text":"%spark\n\n  // AirportID is numerical - Mapping airport ID to the 3-letter code\n  val airportMap = airports.map { case ((org_id), name) => (org_id -> name) }.collect.toList.toMap\n  \n  val airportRDD :RDD[Airport] = sc\n  // Convert Map to Seq so it can passed to parallelize\n  .parallelize(airportMap.toSeq)\n  .map{case (id, (lable)) => {\n      (Airport(id, lable))\n }}\n  \n  //val airportRDD = airportMap.map(airport => Airport(airport._1, airport._2))\n  airportRDD.take(1)\n  \n  // Defining a default vertex called nowhere\n  val nowhere = \"nowhere\"\n  val routes = flightsRDD.map(flight => ((flight.org_id, flight.dest_id), flight.dist)).distinct\n  val routesRDD = routes.map(route => Route(airportMap.apply(route._1._1) +\"-\"+ airportMap.apply(route._1._2), route._1._1, airportMap.apply(route._1._1), route._1._2, airportMap.apply(route._1._2), route._2))\n  routes.cache\n\n  //airportMap: scala.collection.immutable.Map[Long,String] = Map(13024 -> LMT, 10785 -> BTV, 14574 -> ROA, 14057 -> PDX, 13933 -> ORH, 11898 -> GFK, 14709 -> SCC, 15380 -> TVC,\n\n  // Defining the routes as edges\n  val edges = routes.map { case ((org_id, dest_id), distance) => Edge(org_id.toLong, dest_id.toLong, distance) }","user":"anonymous","dateUpdated":"2019-01-01T11:54:45+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1546336485325_-882769338","id":"20170502-130302_601946919","dateCreated":"2019-01-01T11:54:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12133"},{"text":"%spark\n\nflightsRDD.saveToGrid()\nairportOriginsRDD.saveToGrid()\nroutesRDD.saveToGrid()\nairportRDD.saveToGrid()\n","user":"anonymous","dateUpdated":"2019-01-01T11:54:45+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1546336485327_-1125128935","id":"20170502-114448_1877838343","dateCreated":"2019-01-01T11:54:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12134"},{"text":"%spark\n\n  //Defining the Graph\n  val graph = Graph(airports, edges, nowhere)\n\n  // LNumber of airports   \n  val numairports = graph.numVertices\n\n  graph.vertices.take(2)\n\n  graph.edges.take(2)\n\n  graph.edges.filter { case (Edge(org_id, dest_id, distance)) => distance > 1000 }.take(3)\n  // res9: Array[org.apache.spark.graphx.Edge[Int]] = Array(Edge(10140,10397,1269), Edge(10140,10821,1670), Edge(10140,12264,1628))\n\n  // Number of routes\n  val numroutes = graph.numEdges\n\n  // The EdgeTriplet class extends the Edge class by adding the srcAttr and dstAttr members which contain the source and destination properties respectively.   \n  graph.triplets.take(3).foreach(println)\n\n  // Define a reduce operation to compute the highest degree vertex\n  def max(a: (VertexId, Int), b: (VertexId, Int)): (VertexId, Int) = {\n    if (a._2 > b._2) a else b\n  }\n\n  // Compute the max degrees\n  val maxInDegree: (VertexId, Int) = graph.inDegrees.reduce(max)\n  //\n  // maxInDegree: (org.apache.spark.graphx.VertexId, Int) = (10397,152)\n  val maxOutDegree: (VertexId, Int) = graph.outDegrees.reduce(max)\n  // maxOutDegree: (org.apache.spark.graphx.VertexId, Int) = (10397,153)\n  val maxDegrees: (VertexId, Int) = graph.degrees.reduce(max)\n  // maxDegrees: (org.apache.spark.graphx.VertexId, Int) = (10397,305)\n\n  // we can compute the in-degree of each vertex (defined in GraphOps) by the following:\n  // which airport has the most incoming flights?\n  graph.inDegrees.collect.sortWith(_._2 > _._2).map(x => (airportMap(x._1), x._2))\n  val inCommingConnectionA = graph.inDegrees.collect.sortWith(_._2 > _._2).map(in => InCommingConnection(in._1, airportMap(in._1), in._2))\n  val inCommingConnectionRDD = sc.parallelize(inCommingConnectionA)\n  //res46: Array[(String, Int)] = Array((ATL,152), (ORD,145), (DFW,143), (DEN,132), (IAH,107), (MSP,96), (LAX,82), (EWR,82), (DTW,81), (SLC,80), \n  graph.outDegrees.join(airports).sortBy(_._2._1, ascending = false).take(1)\n  val outGoingConnectionA = graph.outDegrees.collect.sortWith(_._2 > _._2).map(out => OutGoingConnection(out._1, airportMap(out._1), out._2))\n  val outGoingConnectionRDD = sc.parallelize(outGoingConnectionA)\n  val maxout = graph.outDegrees.join(airports).sortBy(_._2._1, ascending = false).take(3)\n//res46: Array[(String, Int)] = Array((ATL,152), (ORD,145), (DFW,143), (DEN,132), (IAH,107), (MSP,96), (LAX,82), (EWR,82), (DTW,81), (SLC,80), \n  val maxIncoming = graph.inDegrees.collect.sortWith(_._2 > _._2).map(x => (airportMap(x._1), x._2)).take(3)\n  maxIncoming.foreach(println)\n\n\n  maxout.foreach(println)\n\n  val maxOutgoing = graph.outDegrees.collect.sortWith(_._2 > _._2).map(x => (airportMap(x._1), x._2)).take(3)\n  maxOutgoing.foreach(println)\n\n  // What are the top 10 flights from airport to airport?\n  graph.triplets.sortBy(_.attr, ascending = false).map(triplet =>\n    \"There were \" + triplet.attr.toString + \" flights from \" + triplet.srcAttr + \" to \" + triplet.dstAttr + \".\").take(10)\n\n  val sourceId: VertexId = 13024\n  // 50 + distance / 20 \n  graph.edges.filter { case (Edge(org_id, dest_id, distance)) => distance > 1000 }.take(3)\n\n  val gg = graph.mapEdges(e => 50.toDouble + e.attr.toDouble / 20)\n  val initialGraph = gg.mapVertices((id, _) => if (id == sourceId) 0.0 else Double.PositiveInfinity)","user":"anonymous","dateUpdated":"2019-01-01T11:54:45+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1546336485328_-2104256855","id":"20170501-154737_2044942934","dateCreated":"2019-01-01T11:54:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12135"},{"text":"%spark\n\ninCommingConnectionRDD.saveToGrid()\noutGoingConnectionRDD.saveToGrid()","user":"anonymous","dateUpdated":"2019-01-01T11:54:45+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1546336485329_318292849","id":"20170503-121805_990388874","dateCreated":"2019-01-01T11:54:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12136"},{"text":"%spark\n\nimport org.apache.spark.graphx._\nimport org.apache.spark.graphx.lib.ShortestPaths\n\nval result = ShortestPaths.run(graph, Seq(11150L))\nresult.vertices.take(10)\nresult.edges.take(10)\n\nval shortestPath0 = result                      // result is a graph\n  .vertices\n  .filter({case(vId, _) => vId == 10268L})      // we filter to get only the shortest path from v1\n\nshortestPath0.take(10)\n\nval shortestPath = result                      // result is a graph\n  .vertices                                     // we get the vertices RDD\n  .filter({case(vId, _) => vId == 10268L})      // we filter to get only the shortest path from v1\n  .first                                        // there's only one value\n  \nval shortestPathFor11150 = result                      // result is a graph\n  .vertices                                     // we get the vertices RDD\n  .filter({case(vId, _) => vId == 10268L})      // we filter to get only the shortest path from v1\n  .first                                        // there's only one value\n  ._2                                           // the result is a tuple (v1, Map)\n  .get(11150L)                                  // we get its shortest path to v2 as an Option object","user":"anonymous","dateUpdated":"2019-01-01T11:54:45+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1546336485331_-325157821","id":"20170503-151557_2059843900","dateCreated":"2019-01-01T11:54:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12137"}],"name":"Lab 15.4 Example - GraphX Airline Demo","id":"2E2B35XPS","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}