{"paragraphs":[{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class Flight(\n   @BeanProperty\n   @SpaceId\n   var uId: String,\n   \n   @BeanProperty\n   var dofM: String,\n   \n   @BeanProperty\n   var dofW: String,\n   \n   @BeanProperty\n   var carrier: String,\n   \n   @BeanProperty\n   var tailnum: String,\n   \n   @BeanProperty\n   var flnum: Int,\n   \n   @BeanProperty\n   var org_id: Long,\n   \n   @BeanProperty\n   var origin: String,\n   \n   @BeanProperty\n   var dest_id: Long,\n   \n   @BeanProperty\n   var dest: String,\n   \n   @BeanProperty\n   var crsdeptime: Double,\n   \n   @BeanProperty\n   var deptime: Double,\n   \n   @BeanProperty\n   var depdelaymins: Double,\n   \n   @BeanProperty\n   var crsarrtime: Double,\n   \n   @BeanProperty\n   var arrtime: Double,\n   \n   @BeanProperty\n   var arrdelay: Double,\n   \n   @BeanProperty\n   var crselapsedtime: Double,\n   \n   @BeanProperty\n   var dist: Int\n) {\n   def this() = this(null, null, null, null, null, -1, \n    -1, null, -1, null, \n    -1.0, -1.0, -1.0, -1.0, \n    -1.0, -1.0, -1.0, -1)\n}\n\n/*\ncase class Flight(dofM: String, dofW: String, carrier: String, tailnum: String, flnum: Int //5\n, org_id: Long, origin: String, dest_id: Long, dest: String, //4\ncrsdeptime: Double, deptime: Double, depdelaymins: Double, crsarrtime: Double   //4\n, arrtime: Double, arrdelay: Double, crselapsedtime: Double, dist: Int) //4\n*/","user":"anonymous","dateUpdated":"2019-01-02T10:33:35+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res5: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@3e71c2c8\n"}]},"apps":[],"jobName":"paragraph_1546336485309_777927137","id":"20170501-154625_634252379","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-02T10:33:35+0200","dateFinished":"2019-01-02T10:33:37+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:102"},{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class AirportOrigin(\n   @BeanProperty\n   @SpaceId\n   var org_id: Long,\n   \n   @BeanProperty\n   var origin: String\n) {\n   def this() = this(-1, null)\n}","user":"anonymous","dateUpdated":"2019-01-02T11:41:21+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@586f7663\n"}]},"apps":[],"jobName":"paragraph_1546336485312_-1270366284","id":"20170502-115943_1344011911","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-02T10:32:36+0200","dateFinished":"2019-01-02T10:33:02+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:103"},{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class Airport(\n   @BeanProperty\n   @SpaceId\n   var org_id: Long,\n   \n   @BeanProperty\n   var origin_name: String\n) {\n   def this() = this(-1, null)\n}","user":"anonymous","dateUpdated":"2019-01-02T11:41:23+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@4f28bc76\n"}]},"apps":[],"jobName":"paragraph_1546336485314_-1408077438","id":"20170502-134621_1036790234","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-02T10:33:06+0200","dateFinished":"2019-01-02T10:33:10+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:104"},{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class InCommingConnection(\n   @BeanProperty\n   @SpaceId\n   var org_id: Long,\n   \n   @BeanProperty\n   var origin_name: String,\n   \n   @BeanProperty\n   var number_of_connections: Int\n) {\n   def this() = this(-1, null, -1)\n}","user":"anonymous","dateUpdated":"2019-01-02T10:33:13+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res2: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@356353f6\n"}]},"apps":[],"jobName":"paragraph_1546336485316_394552860","id":"20170503-102535_1690738828","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-02T10:33:13+0200","dateFinished":"2019-01-02T10:33:16+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:105"},{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class OutGoingConnection(\n   @BeanProperty\n   @SpaceId\n   var org_id: Long,\n   \n   @BeanProperty\n   var origin_name: String,\n   \n   @BeanProperty\n   var number_of_connections: Int\n) {\n   def this() = this(-1, null, -1)\n}","user":"anonymous","dateUpdated":"2019-01-02T10:33:20+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res3: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@3bbdc9aa\n"}]},"apps":[],"jobName":"paragraph_1546336485318_144492675","id":"20170503-103201_1524524541","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-02T10:33:20+0200","dateFinished":"2019-01-02T10:33:22+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:106"},{"text":"%define\n\nimport org.insightedge.scala.annotation._\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\n@SpaceClass\ncase class Route(\n   @BeanProperty\n   @SpaceId\n   var orig_dest: String,\n   \n   @BeanProperty\n   var origin: Long,\n   \n   @BeanProperty\n   var origin_name: String,\n   \n   @BeanProperty\n   var destination: Long,\n   \n   @BeanProperty\n   var destination_name: String,\n   \n   @BeanProperty\n   var distance: Int\n) {\n   def this() = this(null, -1, null, -1, null, -1)\n}","user":"anonymous","dateUpdated":"2019-01-02T10:33:26+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res4: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@6b1a8846\n"}]},"apps":[],"jobName":"paragraph_1546336485320_1614997192","id":"20170502-130046_853166516","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-02T10:33:26+0200","dateFinished":"2019-01-02T10:33:29+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:107"},{"text":"\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.util.IntParam\nimport org.apache.spark.sql.SQLContext\nimport org.apache.spark.graphx._\nimport org.apache.spark.graphx.util.GraphGenerators\nimport org.apache.spark.util.StatCounter\n\n\n  def parseFlight(str: String): Flight = {\n    val line = str.split(\",\")\n    Flight(line(0)+line(4), line(0), line(1), line(2), line(3), line(4).toInt, line(5).toLong, \n           line(6), line(7).toLong, line(8), line(9).toDouble, line(10).toDouble, \n           line(11).toDouble, line(12).toDouble, line(13).toDouble, line(14).toDouble, line(15).toDouble, line(16).toInt)\n  }\n  //Create RDD with the January 2014 data \n  val textRDD = sc.textFile(\"../../../../data/rita2014jan.csv\")\n\n  val flightsRDD = textRDD.map(parseFlight).cache()\n  flightsRDD.take(1)\n","user":"anonymous","dateUpdated":"2019-01-02T10:35:56+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.rdd.RDD\nimport org.apache.spark.util.IntParam\nimport org.apache.spark.sql.SQLContext\nimport org.apache.spark.graphx._\nimport org.apache.spark.graphx.util.GraphGenerators\nimport org.apache.spark.util.StatCounter\nparseFlight: (str: String)Flight\ntextRDD: org.apache.spark.rdd.RDD[String] = ../../../../data/rita2014jan.csv MapPartitionsRDD[4] at textFile at <console>:43\nflightsRDD: org.apache.spark.rdd.RDD[Flight] = MapPartitionsRDD[5] at map at <console>:45\nres7: Array[Flight] = Array(Flight(11,1,3,AA,N338AA,1,12478,JFK,12892,LAX,900.0,914.0,14.0,1225.0,1238.0,13.0,385.0,2475))\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4040/jobs/job?id=0"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1546336485321_922199331","id":"20170501-154608_848853042","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-02T10:35:56+0200","dateFinished":"2019-01-02T10:36:06+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:108"},{"text":"%spark\n\n  val airports = flightsRDD.map(flight => (flight.org_id, flight.origin)).distinct\n  airports.take(1)\n  val airportOriginsRDD = airports.map(airport => AirportOrigin(airport._1, airport._2))","user":"anonymous","dateUpdated":"2019-01-02T10:36:51+0200","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"airports: org.apache.spark.rdd.RDD[(Long, String)] = MapPartitionsRDD[9] at distinct at <console>:47\nres9: Array[(Long, String)] = Array((14057,PDX))\nairportOriginsRDD: org.apache.spark.rdd.RDD[AirportOrigin] = MapPartitionsRDD[10] at map at <console>:49\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4040/jobs/job?id=1"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1546336485324_329590378","id":"20170502-121536_250286007","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-02T10:36:51+0200","dateFinished":"2019-01-02T10:36:56+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109"},{"text":"%spark\n\n  // AirportID is numerical - Mapping airport ID to the 3-letter code\n  val airportMap = airports.map { case ((org_id), name) => (org_id -> name) }.collect.toList.toMap\n  \n   // Convert Map to Seq so it can passed to parallelize\n  val airportRDD :RDD[Airport] = sc.parallelize(airportMap.toSeq).map{case (id, (lable)) => {\n      (Airport(id, lable))\n }}\n  \n  //val airportRDD = airportMap.map(airport => Airport(airport._1, airport._2))\n  airportRDD.take(1)\n  \n  // Defining a default vertex called nowhere\n  val nowhere = \"nowhere\"\n  val routes = flightsRDD.map(flight => ((flight.org_id, flight.dest_id), flight.dist)).distinct\n  val routesRDD = routes.map(route => Route(airportMap.apply(route._1._1) +\"-\"+ airportMap.apply(route._1._2), route._1._1, airportMap.apply(route._1._1), route._1._2, airportMap.apply(route._1._2), route._2))\n  routes.cache\n\n  //airportMap: scala.collection.immutable.Map[Long,String] = Map(13024 -> LMT, 10785 -> BTV, 14574 -> ROA, 14057 -> PDX, 13933 -> ORH, 11898 -> GFK, 14709 -> SCC, 15380 -> TVC,\n\n  // Defining the routes as edges\n  val edges = routes.map { case ((org_id, dest_id), distance) => Edge(org_id.toLong, dest_id.toLong, distance) }","user":"anonymous","dateUpdated":"2019-01-02T11:43:29+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"airportMap: scala.collection.immutable.Map[Long,String] = Map(13024 -> LMT, 10785 -> BTV, 14574 -> ROA, 14057 -> PDX, 13933 -> ORH, 11898 -> GFK, 14709 -> SCC, 15380 -> TVC, 11308 -> DHN, 10299 -> ANC, 13244 -> MEM, 12094 -> HDN, 12129 -> HIB, 10431 -> AVL, 11603 -> EUG, 14570 -> RNO, 11122 -> CPR, 13424 -> MOD, 13796 -> OAK, 12896 -> LBB, 14905 -> SMX, 12511 -> JLN, 10747 -> BRO, 10170 -> ADQ, 14689 -> SBA, 13029 -> LNK, 13830 -> OGG, 13127 -> LWS, 13970 -> OTZ, 10599 -> BHM, 12992 -> LIT, 11146 -> CRW, 15295 -> TOL, 12339 -> IND, 11481 -> ECP, 11977 -> GRB, 12884 -> LAN, 12197 -> HPN, 13360 -> MLB, 11203 -> CWA, 14489 -> RDM, 11111 -> COU, 12819 -> KTN, 12003 -> GTF, 10469 -> AZO, 11986 -> GRR, 14487 -> RDD, 11641 -> FAY, 14633 -> RST, 13388 -> MMH, 10157 -> ACV, 11778 -> FSM, 10918 -...airportRDD: org.apache.spark.rdd.RDD[Airport] = MapPartitionsRDD[18] at map at <console>:57\nres31: Array[Airport] = Array(Airport(13024,LMT))\nnowhere: String = nowhere\nroutes: org.apache.spark.rdd.RDD[((Long, Long), Int)] = MapPartitionsRDD[22] at distinct at <console>:51\nroutesRDD: org.apache.spark.rdd.RDD[Route] = MapPartitionsRDD[23] at map at <console>:57\nres33: routes.type = MapPartitionsRDD[22] at distinct at <console>:51\nedges: org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[Int]] = MapPartitionsRDD[24] at map at <console>:56\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4040/jobs/job?id=9","http://192.168.9.185:4040/jobs/job?id=10"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1546336485325_-882769338","id":"20170502-130302_601946919","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-02T11:43:29+0200","dateFinished":"2019-01-02T11:43:35+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:110"},{"text":"\nimport org.insightedge.spark.implicits.all._\nimport org.insightedge.spark.context.InsightEdgeConfig\n\nflightsRDD.saveToGrid()\nairportOriginsRDD.saveToGrid()\nroutesRDD.saveToGrid()\nairportRDD.saveToGrid()\n","user":"anonymous","dateUpdated":"2019-01-02T11:43:47+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.insightedge.spark.implicits.all._\nimport org.insightedge.spark.context.InsightEdgeConfig\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4040/jobs/job?id=11","http://192.168.9.185:4040/jobs/job?id=12","http://192.168.9.185:4040/jobs/job?id=13","http://192.168.9.185:4040/jobs/job?id=14"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1546336485327_-1125128935","id":"20170502-114448_1877838343","dateCreated":"2019-01-01T11:54:45+0200","dateStarted":"2019-01-02T11:43:48+0200","dateFinished":"2019-01-02T11:44:00+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:111"},{"text":"%spark\n\n  //Defining the Graph\n  val graph = Graph(airports, edges, nowhere)\n\n  // LNumber of airports   \n  val numairports = graph.numVertices\n\n  graph.vertices.take(2)\n\n  graph.edges.take(2)\n\n  graph.edges.filter { case (Edge(org_id, dest_id, distance)) => distance > 1000 }.take(3)\n  // res9: Array[org.apache.spark.graphx.Edge[Int]] = Array(Edge(10140,10397,1269), Edge(10140,10821,1670), Edge(10140,12264,1628))\n\n  // Number of routes\n  val numroutes = graph.numEdges\n\n  // The EdgeTriplet class extends the Edge class by adding the srcAttr and dstAttr members which contain the source and destination properties respectively.   \n  graph.triplets.take(3).foreach(println)\n\n  // Define a reduce operation to compute the highest degree vertex\n  def max(a: (VertexId, Int), b: (VertexId, Int)): (VertexId, Int) = {\n    if (a._2 > b._2) a else b\n  }\n\n  // Compute the max degrees\n  val maxInDegree: (VertexId, Int) = graph.inDegrees.reduce(max)\n  //\n  // maxInDegree: (org.apache.spark.graphx.VertexId, Int) = (10397,152)\n  val maxOutDegree: (VertexId, Int) = graph.outDegrees.reduce(max)\n  // maxOutDegree: (org.apache.spark.graphx.VertexId, Int) = (10397,153)\n  val maxDegrees: (VertexId, Int) = graph.degrees.reduce(max)\n  // maxDegrees: (org.apache.spark.graphx.VertexId, Int) = (10397,305)\n\n  // we can compute the in-degree of each vertex (defined in GraphOps) by the following:\n  // which airport has the most incoming flights?\n  graph.inDegrees.collect.sortWith(_._2 > _._2).map(x => (airportMap(x._1), x._2))\n  val inCommingConnectionA = graph.inDegrees.collect.sortWith(_._2 > _._2).map(in => InCommingConnection(in._1, airportMap(in._1), in._2))\n  val inCommingConnectionRDD = sc.parallelize(inCommingConnectionA)\n  //res46: Array[(String, Int)] = Array((ATL,152), (ORD,145), (DFW,143), (DEN,132), (IAH,107), (MSP,96), (LAX,82), (EWR,82), (DTW,81), (SLC,80), \n  graph.outDegrees.join(airports).sortBy(_._2._1, ascending = false).take(1)\n  val outGoingConnectionA = graph.outDegrees.collect.sortWith(_._2 > _._2).map(out => OutGoingConnection(out._1, airportMap(out._1), out._2))\n  val outGoingConnectionRDD = sc.parallelize(outGoingConnectionA)\n  val maxout = graph.outDegrees.join(airports).sortBy(_._2._1, ascending = false).take(3)\n//res46: Array[(String, Int)] = Array((ATL,152), (ORD,145), (DFW,143), (DEN,132), (IAH,107), (MSP,96), (LAX,82), (EWR,82), (DTW,81), (SLC,80), \n  val maxIncoming = graph.inDegrees.collect.sortWith(_._2 > _._2).map(x => (airportMap(x._1), x._2)).take(3)\n  maxIncoming.foreach(println)\n\n\n  maxout.foreach(println)\n\n  val maxOutgoing = graph.outDegrees.collect.sortWith(_._2 > _._2).map(x => (airportMap(x._1), x._2)).take(3)\n  maxOutgoing.foreach(println)\n\n  // What are the top 10 flights from airport to airport?\n  graph.triplets.sortBy(_.attr, ascending = false).map(triplet =>\n    \"There were \" + triplet.attr.toString + \" flights from \" + triplet.srcAttr + \" to \" + triplet.dstAttr + \".\").take(10)\n\n  val sourceId: VertexId = 13024\n  // 50 + distance / 20 \n  graph.edges.filter { case (Edge(org_id, dest_id, distance)) => distance > 1000 }.take(3)\n\n  val gg = graph.mapEdges(e => 50.toDouble + e.attr.toDouble / 20)\n  val initialGraph = gg.mapVertices((id, _) => if (id == sourceId) 0.0 else Double.PositiveInfinity)","user":"anonymous","dateUpdated":"2019-01-02T11:45:14+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1546336485328_-2104256855","id":"20170501-154737_2044942934","dateCreated":"2019-01-01T11:54:45+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:112","dateFinished":"2019-01-02T11:45:26+0200","dateStarted":"2019-01-02T11:45:14+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"graph: org.apache.spark.graphx.Graph[String,Int] = org.apache.spark.graphx.impl.GraphImpl@6b80134e\nnumairports: Long = 301\nres44: Array[(org.apache.spark.graphx.VertexId, String)] = Array((10208,AGS), (10268,ALO))\nres45: Array[org.apache.spark.graphx.Edge[Int]] = Array(Edge(10135,10397,692), Edge(10135,13930,654))\nres46: Array[org.apache.spark.graphx.Edge[Int]] = Array(Edge(10140,10397,1269), Edge(10140,10821,1670), Edge(10140,12264,1628))\nnumroutes: Long = 4091\n((10135,ABE),(10397,ATL),692)\n((10135,ABE),(13930,ORD),654)\n((10140,ABQ),(10397,ATL),1269)\nmax: (a: (org.apache.spark.graphx.VertexId, Int), b: (org.apache.spark.graphx.VertexId, Int))(org.apache.spark.graphx.VertexId, Int)\nmaxInDegree: (org.apache.spark.graphx.VertexId, Int) = (10397,152)\nmaxOutDegree: (org.apache.spark.graphx.VertexId, Int) = (10397,154)\nmaxDegrees: (org.apache.spark.graphx.VertexId, Int) = (10397,306)\nres59: Array[(String, Int)] = Array((ATL,152), (ORD,145), (DFW,143), (DEN,132), (IAH,107), (MSP,96), (LAX,82), (EWR,82), (DTW,81), (SLC,80), (PHX,75), (SFO,75), (LAS,74), (MCO,70), (IAD,69), (MDW,63), (CLT,61), (BWI,61), (JFK,60), (LGA,58), (SEA,58), (CLE,56), (TPA,56), (MIA,51), (BOS,51), (FLL,48), (HOU,47), (BNA,45), (STL,43), (PHL,42), (PDX,42), (SAN,40), (DCA,39), (AUS,36), (MCI,34), (MSY,34), (RSW,32), (RDU,31), (SAT,29), (CVG,29), (PIT,28), (IND,27), (HNL,27), (MKE,26), (OAK,25), (CMH,25), (SJU,24), (SJC,24), (SMF,24), (ANC,23), (BDL,23), (ABQ,22), (JAX,22), (MEM,21), (DAL,20), (OKC,20), (BUF,19), (PBI,19), (BHM,19), (SNA,18), (ORF,18), (OGG,17), (GRR,17), (TUL,17), (CHS,16), (SDF,16), (OMA,16), (TUS,15), (RIC,15), (PVD,14), (ONT,14), (PSP,13), (ROC,13), (LGB,12), (RNO,12), (LIT,1...inCommingConnectionA: Array[InCommingConnection] = Array(InCommingConnection(10397,ATL,152), InCommingConnection(13930,ORD,145), InCommingConnection(11298,DFW,143), InCommingConnection(11292,DEN,132), InCommingConnection(12266,IAH,107), InCommingConnection(13487,MSP,96), InCommingConnection(12892,LAX,82), InCommingConnection(11618,EWR,82), InCommingConnection(11433,DTW,81), InCommingConnection(14869,SLC,80), InCommingConnection(14107,PHX,75), InCommingConnection(14771,SFO,75), InCommingConnection(12889,LAS,74), InCommingConnection(13204,MCO,70), InCommingConnection(12264,IAD,69), InCommingConnection(13232,MDW,63), InCommingConnection(11057,CLT,61), InCommingConnection(10821,BWI,61), InCommingConnection(12478,JFK,60), InCommingConnection(12953,LGA,58), InCommingConnection(14747,SEA,58), ...inCommingConnectionRDD: org.apache.spark.rdd.RDD[InCommingConnection] = ParallelCollectionRDD[57] at parallelize at <console>:69\nres61: Array[(org.apache.spark.graphx.VertexId, (Int, String))] = Array((10397,(154,ATL)))\noutGoingConnectionA: Array[OutGoingConnection] = Array(OutGoingConnection(10397,ATL,154), OutGoingConnection(13930,ORD,146), OutGoingConnection(11298,DFW,143), OutGoingConnection(11292,DEN,132), OutGoingConnection(12266,IAH,108), OutGoingConnection(13487,MSP,97), OutGoingConnection(12892,LAX,82), OutGoingConnection(11618,EWR,82), OutGoingConnection(14869,SLC,80), OutGoingConnection(11433,DTW,80), OutGoingConnection(14107,PHX,76), OutGoingConnection(14771,SFO,75), OutGoingConnection(12889,LAS,74), OutGoingConnection(13204,MCO,70), OutGoingConnection(12264,IAD,68), OutGoingConnection(13232,MDW,63), OutGoingConnection(11057,CLT,61), OutGoingConnection(10821,BWI,61), OutGoingConnection(12478,JFK,60), OutGoingConnection(14747,SEA,58), OutGoingConnection(11042,CLE,56), OutGoingConnection(1530...outGoingConnectionRDD: org.apache.spark.rdd.RDD[OutGoingConnection] = ParallelCollectionRDD[66] at parallelize at <console>:69\nmaxout: Array[(org.apache.spark.graphx.VertexId, (Int, String))] = Array((10397,(154,ATL)), (13930,(146,ORD)), (11298,(143,DFW)))\nmaxIncoming: Array[(String, Int)] = Array((ATL,152), (ORD,145), (DFW,143))\n(ATL,152)\n(ORD,145)\n(DFW,143)\n(10397,(154,ATL))\n(13930,(146,ORD))\n(11298,(143,DFW))\nmaxOutgoing: Array[(String, Int)] = Array((ATL,154), (ORD,146), (DFW,143))\n(ATL,154)\n(ORD,146)\n(DFW,143)\nres67: Array[String] = Array(There were 7622 flights from ATL to LGA., There were 4983 flights from JFK to HNL., There were 4983 flights from HNL to JFK., There were 4963 flights from EWR to HNL., There were 4963 flights from HNL to EWR., There were 4817 flights from HNL to IAD., There were 4817 flights from IAD to HNL., There were 4502 flights from ATL to HNL., There were 4502 flights from HNL to ATL., There were 4243 flights from HNL to ORD.)\nsourceId: org.apache.spark.graphx.VertexId = 13024\nres69: Array[org.apache.spark.graphx.Edge[Int]] = Array(Edge(10140,10397,1269), Edge(10140,10821,1670), Edge(10140,12264,1628))\ngg: org.apache.spark.graphx.Graph[String,Double] = org.apache.spark.graphx.impl.GraphImpl@84b1d85\ninitialGraph: org.apache.spark.graphx.Graph[Double,Double] = org.apache.spark.graphx.impl.GraphImpl@b9d557\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4040/jobs/job?id=15","http://192.168.9.185:4040/jobs/job?id=16","http://192.168.9.185:4040/jobs/job?id=17","http://192.168.9.185:4040/jobs/job?id=18","http://192.168.9.185:4040/jobs/job?id=19","http://192.168.9.185:4040/jobs/job?id=20","http://192.168.9.185:4040/jobs/job?id=21","http://192.168.9.185:4040/jobs/job?id=22","http://192.168.9.185:4040/jobs/job?id=23","http://192.168.9.185:4040/jobs/job?id=24","http://192.168.9.185:4040/jobs/job?id=25","http://192.168.9.185:4040/jobs/job?id=26","http://192.168.9.185:4040/jobs/job?id=27","http://192.168.9.185:4040/jobs/job?id=28","http://192.168.9.185:4040/jobs/job?id=29","http://192.168.9.185:4040/jobs/job?id=30","http://192.168.9.185:4040/jobs/job?id=31","http://192.168.9.185:4040/jobs/job?id=32","http://192.168.9.185:4040/jobs/job?id=33","http://192.168.9.185:4040/jobs/job?id=34","http://192.168.9.185:4040/jobs/job?id=35"],"interpreterSettingId":"spark"}}},{"text":"%spark\n\ninCommingConnectionRDD.saveToGrid()\noutGoingConnectionRDD.saveToGrid()","user":"anonymous","dateUpdated":"2019-01-02T11:45:35+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1546336485329_318292849","id":"20170503-121805_990388874","dateCreated":"2019-01-01T11:54:45+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:113","dateFinished":"2019-01-02T11:45:37+0200","dateStarted":"2019-01-02T11:45:35+0200","results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4040/jobs/job?id=36","http://192.168.9.185:4040/jobs/job?id=37"],"interpreterSettingId":"spark"}}},{"text":"%spark\n\nimport org.apache.spark.graphx._\nimport org.apache.spark.graphx.lib.ShortestPaths\n\nval result = ShortestPaths.run(graph, Seq(11150L))\nresult.vertices.take(10)\nresult.edges.take(10)\n\n// result is a graph\n // we filter to get only the shortest path from v1\nval shortestPath0 = result.vertices.filter({case(vId, _) => vId == 10268L})        \n \nshortestPath0.take(10)\n\n// result is a graph\n// we filter to get only the shortest path from v1\n// we get the vertices RDD\n// there's only one value\nval shortestPath = result.vertices.filter({case(vId, _) => vId == 10268L}).first                    \n                                     \n// result is a graph     \n// we filter to get only the shortest path from v1\n// we get the vertices RDD\n// there's only one value\n// the result is a tuple (v1, Map)\n// we get its shortest path to v2 as an Option object\n  \nval shortestPathFor11150 = result.vertices.filter({case(vId, _) => vId == 10268L}).first._2.get(11150L)                \n                                      \n       \n                                         \n                                           \n                                ","user":"anonymous","dateUpdated":"2019-01-02T11:50:20+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1546336485331_-325157821","id":"20170503-151557_2059843900","dateCreated":"2019-01-01T11:54:45+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:114","dateFinished":"2019-01-02T11:50:25+0200","dateStarted":"2019-01-02T11:50:20+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.graphx._\nimport org.apache.spark.graphx.lib.ShortestPaths\nresult: org.apache.spark.graphx.Graph[org.apache.spark.graphx.lib.ShortestPaths.SPMap,Int] = org.apache.spark.graphx.impl.GraphImpl@71049917\nres81: Array[(org.apache.spark.graphx.VertexId, org.apache.spark.graphx.lib.ShortestPaths.SPMap)] = Array((10208,Map(11150 -> 2)), (10268,Map(11150 -> 3)), (14828,Map(11150 -> 4)), (14698,Map(11150 -> 3)), (12278,Map(11150 -> 2)), (11292,Map(11150 -> 2)), (10930,Map(11150 -> 3)), (10868,Map(11150 -> 2)), (10620,Map(11150 -> 3)), (11146,Map(11150 -> 2)))\nres82: Array[org.apache.spark.graphx.Edge[Int]] = Array(Edge(10135,10397,692), Edge(10135,13930,654), Edge(10140,10397,1269), Edge(10140,10821,1670), Edge(10140,11259,580), Edge(10140,11292,349), Edge(10140,11298,569), Edge(10140,12264,1628), Edge(10140,12478,1826), Edge(10140,13198,718))\nshortestPath0: org.apache.spark.graphx.VertexRDD[org.apache.spark.graphx.lib.ShortestPaths.SPMap] = VertexRDDImpl[358] at RDD at VertexRDD.scala:57\nres85: Array[(org.apache.spark.graphx.VertexId, org.apache.spark.graphx.lib.ShortestPaths.SPMap)] = Array((10268,Map(11150 -> 3)))\nshortestPath: (org.apache.spark.graphx.VertexId, org.apache.spark.graphx.lib.ShortestPaths.SPMap) = (10268,Map(11150 -> 3))\nshortestPathFor11150: Option[Int] = Some(3)\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.9.185:4040/jobs/job?id=54","http://192.168.9.185:4040/jobs/job?id=55","http://192.168.9.185:4040/jobs/job?id=56","http://192.168.9.185:4040/jobs/job?id=57","http://192.168.9.185:4040/jobs/job?id=58","http://192.168.9.185:4040/jobs/job?id=59","http://192.168.9.185:4040/jobs/job?id=60","http://192.168.9.185:4040/jobs/job?id=61","http://192.168.9.185:4040/jobs/job?id=62","http://192.168.9.185:4040/jobs/job?id=63","http://192.168.9.185:4040/jobs/job?id=64"],"interpreterSettingId":"spark"}}}],"name":"Lab 15.4 Example - GraphX Airline Demo","id":"2E2B35XPS","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}