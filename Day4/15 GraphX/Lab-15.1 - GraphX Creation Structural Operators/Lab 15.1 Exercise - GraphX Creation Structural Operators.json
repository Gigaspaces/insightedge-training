{"paragraphs":[{"text":"%md\n\n## Introduction\n\nGraphX is the Spark API for graph processing. \n\nIt provides a wrapper around an RDD called **resilient distributed property graph**. \n\n_The property graph is a directed multigraph with properties attached to each vertex and edge._\n","dateUpdated":"2018-04-15T23:01:22-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Introduction</h2>\n<p>GraphX is the Spark API for graph processing.</p>\n<p>It provides a wrapper around an RDD called <strong>resilient distributed property graph</strong>.</p>\n<p><em>The property graph is a directed multigraph with properties attached to each vertex and edge.</em></p>\n"}]},"apps":[],"jobName":"paragraph_1523847682962_1378931929","id":"20160907-140811_5272388","dateCreated":"2018-04-15T23:01:22-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14211"},{"title":"Example Graph","text":"%spark\n\n\ncase class Person(name:String, age:Int)\n\nval vertices = sc.parallelize(Array(\n\t(1L, Person(\"John\", 39)), \n\t(2L, Person(\"Alice\", 39)), \n\t(3L, Person(\"Peter\", 12)), \n\t(4L, Person(\"Susan\", 12))\n))\n\nval edges = sc.parallelize(Array(\n\tEdge(4L, 3L, \"friend\"),\n\tEdge(3L, 1L, \"father\"), \n\tEdge(3L, 2L, \"mother\"),\n\tEdge(1L, 2L, \"marriedTo\")\n))\n\nval graph = Graph(vertices, edges)\n\ngraph.vertices.count()\n\ngraph.vertices.collect().foreach(println(_))\n\ngraph.edges.count()\n\ngraph.edges.collect().foreach(println(_))\n","user":"anonymous","dateUpdated":"2018-04-16T13:59:20-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523847682971_1375469189","id":"20180415-211354_1326985759","dateCreated":"2018-04-15T23:01:22-0400","dateStarted":"2018-04-16T13:59:20-0400","dateFinished":"2018-04-16T13:59:23-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:14212","errorMessage":""},{"title":"Graph Reversal example","text":"%spark\n\nval reversedGraph = graph.reverse\n\nreversedGraph.vertices.collect().foreach(println(_))\nreversedGraph.edges.collect().foreach(println(_))\n","user":"anonymous","dateUpdated":"2018-04-16T15:48:54-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523901524626_-896302479","id":"20180416-135844_127754365","dateCreated":"2018-04-16T13:58:44-0400","dateStarted":"2018-04-16T13:59:14-0400","dateFinished":"2018-04-16T13:59:15-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:14213","errorMessage":""},{"title":"Mapping Edges and Vertices","text":"%spark\n\nval newgraph1 = graph.mapVertices(\n    (vId, vData) => {\n        vData match {\n            case Person(name, age) => Person(name.toUpperCase(), age)\n        }\n    }\n)\n\nnewgraph1.vertices.collect().foreach(println(_))\n\ncase class Relationship(relation:String)\n\nval newgraph2 = graph.mapEdges(\n    (partId, iter) => iter.map(edge => Relationship(edge.attr))\n)\n\nnewgraph2.edges.collect().foreach(println(_))\n\ncase class PersonExt(name:String, age:Int, children:Int=0, friends:Int=0, married:Boolean=false)\n\n","user":"anonymous","dateUpdated":"2018-04-16T14:38:18-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523898447732_-1191447569","id":"20180416-130727_2002371610","dateCreated":"2018-04-16T13:07:27-0400","dateStarted":"2018-04-16T13:47:31-0400","dateFinished":"2018-04-16T13:47:34-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14214"},{"title":"Describing the relationships in more verbose manner","text":"%spark\n\ngraph.triplets.map(\n  triplet => triplet.srcAttr + \" is the \" + triplet.attr + \" of \" + triplet.dstAttr\n).collect.foreach(println(_))\n","user":"anonymous","dateUpdated":"2018-04-16T13:39:25-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523900205082_469089813","id":"20180416-133645_1367509927","dateCreated":"2018-04-16T13:36:45-0400","dateStarted":"2018-04-16T13:37:31-0400","dateFinished":"2018-04-16T13:37:32-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14215"},{"title":"InDegrees, Outdegress and Degrees","text":"%spark\n\nprintln(\"In Degrees of Vertices\")\ngraph.inDegrees.collect().foreach(println(_))\n\nprintln(\"Out Degrees of Vertices\")\ngraph.outDegrees.collect().foreach(println(_))\n\nprintln(\"Degrees of Vertices\")\ngraph.degrees.collect().foreach(println(_))\n\nprintln(\"Vertices with a fan-in more than 1\")\nval x = graph.inDegrees.filter( vertex =>\n    vertex match { \n        case(vId, inDegree) => inDegree > 1\n    }\n)\nx.collect().foreach(println(_))\n\nprintln(\"Vertices with a fan-out more than 1\")\nval x = graph.outDegrees.filter( vertex =>\n    vertex match { \n        case(vId, outDegree) => outDegree > 1\n    }\n)\nx.collect().foreach(println(_))\n\n","user":"anonymous","dateUpdated":"2018-04-16T14:10:56-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523900344649_713187537","id":"20180416-133904_614567139","dateCreated":"2018-04-16T13:39:04-0400","dateStarted":"2018-04-16T14:10:56-0400","dateFinished":"2018-04-16T14:11:00-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:14216","errorMessage":""},{"title":"Aggregating Messages","text":"%spark\n\nval newGraphExt = newgraph.mapVertices(\n\t(vid, person) => PersonExt(person.name, person.age)\n)\n\nnewGraphExt.vertices.collect().foreach(println(_))\n\nval aggVertices = newGraphExt.aggregateMessages(\n    (ctx:EdgeContext[PersonExt, Relationship, Tuple3[Int, Int, Boolean]]) => {\n        if(ctx.attr.relation == \"marriedTo\")\n        { ctx.sendToSrc((0, 0, true)); ctx.sendToDst((0, 0, true)); }\n        else if(ctx.attr.relation == \"mother\" || ctx.attr.relation == \"father\")\n        { ctx.sendToDst((1, 0, false)); }\n        else if(ctx.attr.relation.contains(\"friend\"))\n        { ctx.sendToDst((0, 1, false)); ctx.sendToSrc((0, 1, false));}\n    },\n    (msg1:Tuple3[Int, Int, Boolean], msg2:Tuple3[Int, Int, Boolean]) =>\n        (msg1._1+msg2._1, msg1._2+msg2._2, msg1._3 || msg2._3)\n)\n\naggVertices.collect.foreach(println(_))\n","user":"anonymous","dateUpdated":"2018-04-16T14:38:24-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523903722606_-1068376659","id":"20180416-143522_1109948344","dateCreated":"2018-04-16T14:35:22-0400","dateStarted":"2018-04-16T14:38:24-0400","dateFinished":"2018-04-16T14:38:26-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:14217","errorMessage":""},{"dateUpdated":"2018-04-15T23:01:22-0400","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523847682984_1356616493","id":"20160912-191128_769552526","dateCreated":"2018-04-15T23:01:22-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:14224"}],"name":"Lab 15.1 GraphX - Creation, Structural Operators","id":"2DBBWU76D","angularObjects":{"2DDAK5JBW:shared_process":[],"2DAXNSRWE:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}