{"paragraphs":[{"text":"%md\n\n## Finding connected components\n\n_A **subgraph** is a graph whose vertices are a subset of the vertex set of the original graph and whose edges are a subset of the edge set of the original graph._\n\n_A **connected component** is a subgraph in which any two vertices are connected to each other by an edge or a series of edges._\n\nThe connected components algorithm labels each connected component of the graph with the ID of its lowest-numbered vertex.\n\nConsider the following data set:\n\n<p>\n<table width=200>\n\t<tr>\n\t\t<th>Follower</th>\n\t\t<th>Followee</th>\n\t</tr>\n\t<tr>\n\t\t<td>John</td>\n\t\t<td>Pat</td>\n\t</tr>\n\t<tr>\n\t\t<td>Pat</td>\n\t\t<td>Dave</td>\n\t</tr>\n\t<tr>\n\t\t<td>Gary</td>\n\t\t<td>Chris</td>\n\t</tr>\n\t<tr>\n\t\t<td>Chris</td>\n\t\t<td>Bill</td>\n\t</tr>\n</table>\n</p>\n\nThe preceding data is a simple one with six vertices and two clusters. Let's put this data in the\nform of two lists: _verticesList_ and _edgesList_.\n\nThe following is the content of _verticesList_:\n\n1,John\n2,Pat\n3,Dave\n4,Gary\n5,Chris\n6,Bill\n\nThe following is the content of _edgesList_:\n\n1,2,follows\n2,3,follows\n4,5,follows\n5,6,follows\n\nA connected component algorithm is expected to identify two clusters, the first one\nidentified by (1,John) and the second by (4,Gary\n\nExercise: \nPrint the connected component results.\n \n","user":"anonymous","dateUpdated":"2019-02-11T12:10:45-0500","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Finding connected components</h2>\n<p><em>A <strong>subgraph</strong> is a graph whose vertices are a subset of the vertex set of the original graph and whose edges are a subset of the edge set of the original graph.</em></p>\n<p><em>A <strong>connected component</strong> is a subgraph in which any two vertices are connected to each other by an edge or a series of edges.</em></p>\n<p>The connected components algorithm labels each connected component of the graph with the ID of its lowest-numbered vertex.</p>\n<p>Consider the following data set:</p>\n<p>\n<table width=200>\n\t<tr>\n\t\t<th>Follower</th>\n\t\t<th>Followee</th>\n\t</tr>\n\t<tr>\n\t\t<td>John</td>\n\t\t<td>Pat</td>\n\t</tr>\n\t<tr>\n\t\t<td>Pat</td>\n\t\t<td>Dave</td>\n\t</tr>\n\t<tr>\n\t\t<td>Gary</td>\n\t\t<td>Chris</td>\n\t</tr>\n\t<tr>\n\t\t<td>Chris</td>\n\t\t<td>Bill</td>\n\t</tr>\n</table>\n</p>\n<p>The preceding data is a simple one with six vertices and two clusters. Let&rsquo;s put this data in the<br/>form of two lists: <em>verticesList</em> and <em>edgesList</em>.</p>\n<p>The following is the content of <em>verticesList</em>:</p>\n<p>1,John<br/>2,Pat<br/>3,Dave<br/>4,Gary<br/>5,Chris<br/>6,Bill</p>\n<p>The following is the content of <em>edgesList</em>:</p>\n<p>1,2,follows<br/>2,3,follows<br/>4,5,follows<br/>5,6,follows</p>\n<p>A connected component algorithm is expected to identify two clusters, the first one<br/>identified by (1,John) and the second by (4,Gary).</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1549905045396_76815587","id":"20160907-141220_1482548092","dateCreated":"2019-02-11T12:10:45-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3448"},{"text":"%spark\n\nval vRdd = sc.parallelize(Array(\n    (1L,\"John\"),\n    (2L,\"Pat\"),\n    (3L,\"Dave\"),\n    (4L,\"Gary\"),\n    (5L,\"Chris\"),\n    (6L,\"Bill\")\n))\n\nval eRdd = sc.parallelize(Array(\n    Edge(1L,2L,\"follows\"),\n    Edge(2L,3L,\"follows\"),\n    Edge(4L,5L,\"follows\"),\n    Edge(5L,6L,\"follows\")\n))\n\nval graph = Graph(vRdd, eRdd)\n\ngraph.vertices.collect.foreach(println)\ngraph.edges.collect.foreach(println)\n\nval cc = graph.connectedComponents\n\nval ccVertices = cc.vertices\n\nccVertices.collect.foreach(println)\n","user":"anonymous","dateUpdated":"2019-02-11T12:10:45-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"vRdd: org.apache.spark.rdd.RDD[(Long, String)] = ParallelCollectionRDD[462] at parallelize at <console>:62\neRdd: org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[String]] = ParallelCollectionRDD[463] at parallelize at <console>:62\ngraph: org.apache.spark.graphx.Graph[String,String] = org.apache.spark.graphx.impl.GraphImpl@629daa85\n(4,Gary)\n(1,John)\n(5,Chris)\n(6,Bill)\n(2,Pat)\n(3,Dave)\nEdge(1,2,follows)\nEdge(2,3,follows)\nEdge(4,5,follows)\nEdge(5,6,follows)\ncc: org.apache.spark.graphx.Graph[org.apache.spark.graphx.VertexId,String] = org.apache.spark.graphx.impl.GraphImpl@18b03461\nccVertices: org.apache.spark.graphx.VertexRDD[org.apache.spark.graphx.VertexId] = VertexRDDImpl[516] at RDD at VertexRDD.scala:57\n(4,4)\n(1,1)\n(5,4)\n(6,4)\n(2,1)\n(3,1)\n"}]},"apps":[],"jobName":"paragraph_1549905045408_-575946846","id":"20160912-191128_769552526","dateCreated":"2019-02-11T12:10:45-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3449"}],"name":"Lab 13.2 Solution - GraphX Connected Components","id":"2E697BZ1H","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"insightedge_jdbc:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}